<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode</title>
    <url>/2021/04/27/LeetCode/</url>
    <content><![CDATA[<h1 id="Array-35（search-insert-position）"><a href="#Array-35（search-insert-position）" class="headerlink" title="Array_35（search-insert-position）"></a>Array_35（search-insert-position）</h1><p>先确认查找算法是二分查找（binary-search），将<a href="https://leetcode-cn.com/problems/binary-search/">二分查找的算法</a>解了一次。问题：执行用时很少，但内存占用多</p>
<p>当没找到index后，比较target和nums[pivot]，返回插入位置就行。问题：空间复杂度高</p>
<p><img src="/images/LeetCode/search-insert-position-1.jpg"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://leetcode-cn.com/circle/article/wGp7Y9/">LeetCode最强刷题指南</a></p>
<p><a href="https://github.com/youngyangyang04/leetcode-master">LeetCode刷题攻略</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL/TLS相关</title>
    <url>/2021/05/19/SSL-TLS%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p><a href="https://www.rfc-editor.org/">RFC官方文档</a>（PDF|HTML）：<a href="https://www.rfc-editor.org/info/rfc2246">RFC-2246（TLS1.0）</a>、<a href="https://www.rfc-editor.org/info/rfc4346">RFC-4346（TLS1.1）</a>、<a href="https://www.rfc-editor.org/info/rfc5246">RFC-5246（TLS1.2）</a>、<a href="https://www.rfc-editor.org/info/rfc8446">RFC-8446（TLS1.3）</a>、RFC-4492、RFC-5764、<a href="https://www.rfc-editor.org/info/rfc5878">RFC-5878</a>、<a href="https://www.rfc-editor.org/info/rfc5077">RFC-5077</a>、</p>
]]></content>
      <tags>
        <tag>ssl/tls</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程高并发</title>
    <url>/2021/05/24/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h1 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h1><p>视频课程地址：<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=9">【狂神说Java】多线程详解</a></p>
<p>多任务、多线程、程序–&gt;进程process–&gt;线程thread</p>
<h1 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h1><h2 id="Thread-class–-gt-继承Thread类（重点）"><a href="#Thread-class–-gt-继承Thread类（重点）" class="headerlink" title="Thread.class–&gt;继承Thread类（重点）"></a>Thread.class–&gt;继承Thread类（重点）</h2><p>run()方法和start()方法的区别：</p>
<p><img src="/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg"></p>
<p>根据Java手册，Thread实现的接口有Runnable接口，创建一个新的执行线程有两种方法。 </p>
<p>一个是将一个类声明为<code>Thread</code>的子类。 这个子类应该重写<code>run</code>类的方法<code>Thread</code> 。 然后可以分配并启动子类的实例。 例如，计算大于规定值的素数的线程可以写成如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> minPrime;</span><br><span class="line">    PrimeThread(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">         . . .</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，以下代码将创建一个线程并启动它运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrimeThread p = <span class="keyword">new</span> PrimeThread(<span class="number">143</span>);</span><br><span class="line">p.start();</span><br></pre></td></tr></table></figure>

<p>自己编写的代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> taifengliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/05/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 继承Thread类，重写run()方法，调用start开启线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run()-&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// main线程，主线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个线程对象，然后调用start()方法</span></span><br><span class="line">        PrimeThread newThread1 = <span class="keyword">new</span> PrimeThread();</span><br><span class="line">        newThread1.start();  <span class="comment">// start()方法，会发现两条线程是同时执行的，穿插实现，且每次执行结果不一样</span></span><br><span class="line">        <span class="comment">//newThread1.run();  // run()方法会先执行run方法，然后执行main()方法（这是因为方法之间是固定顺序）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Main()---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>练习例子：网图多线程下载，需要提前下载并导入commons-io-2.6.jar包，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: TaifengLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiPhotosDownload</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;  <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">// 保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiPhotosDownload</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载图片的结构体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDowmloader webDowmloader = <span class="keyword">new</span> WebDowmloader();</span><br><span class="line">        webDowmloader.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MultiPhotosDownload multiPhotosDownload1 = <span class="keyword">new</span> MultiPhotosDownload(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        MultiPhotosDownload multiPhotosDownload2 = <span class="keyword">new</span> MultiPhotosDownload(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        MultiPhotosDownload multiPhotosDownload3 = <span class="keyword">new</span> MultiPhotosDownload(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以发现下面不是顺序执行，多线程</span></span><br><span class="line">        multiPhotosDownload1.start();</span><br><span class="line">        multiPhotosDownload2.start();</span><br><span class="line">        multiPhotosDownload3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 下载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDowmloader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader()方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Runnable接口–-gt-实现Runnable接口（格外重点）🌟🌟🌟"><a href="#Runnable接口–-gt-实现Runnable接口（格外重点）🌟🌟🌟" class="headerlink" title="Runnable接口–&gt;实现Runnable接口（格外重点）🌟🌟🌟"></a>Runnable接口–&gt;实现Runnable接口（格外重点）🌟🌟🌟</h2><p>根据Java手册，实现多线程的第二种方法是实现Runnable接口，其实这种方法和继承Thread很像，就是改了线程启动的方法。</p>
<p>另一种方法来创建一个线程是声明实现类<code>Runnable</code>接口。 那个类然后实现了<code>run</code>方法。 然后可以分配类的实例，在创建<code>Thread</code>时作为参数传递，并启动。 这种其他风格的同一个例子如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> minPrime;</span><br><span class="line">    PrimeRun(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">         . . .</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，以下代码将创建一个线程并启动它运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrimeRun p = <span class="keyword">new</span> PrimeRun(<span class="number">143</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(p).start();</span><br></pre></td></tr></table></figure>

<p>自己实现的代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: TaifengLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现Runnable接口，重写run()方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImpRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run()&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ImpRunnable impRunnable = <span class="keyword">new</span> ImpRunnable();</span><br><span class="line">        <span class="keyword">new</span> Thread(impRunnable).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Main&quot;</span>+ i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比-继承Thread和Runnable接口实现的区别和优劣势：</p>
<p><img src="/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/threadvsrunnable.png"></p>
<p>并发问题：多个线程操作同一个资源对象，会出现紊乱，栗子如下（抢火车票）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: TaifengLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试Runnable实现多个线程操作同一个对象--买火车票</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟延时</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() +  <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发现问题，多个线程操作同一个资源的情况下，线程不安全，数据紊乱----线程同步的时候解决</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread, <span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testThread, <span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testThread, <span class="string">&quot;3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码输出结果：出现了抢同一张票以及有人抢到负数票，不现实</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3拿到了第8票</span><br><span class="line">1拿到了第10票</span><br><span class="line">2拿到了第9票</span><br><span class="line">1拿到了第7票</span><br><span class="line">2拿到了第7票</span><br><span class="line">3拿到了第7票</span><br><span class="line">2拿到了第5票</span><br><span class="line">3拿到了第4票</span><br><span class="line">1拿到了第6票</span><br><span class="line">2拿到了第3票</span><br><span class="line">1拿到了第2票</span><br><span class="line">3拿到了第2票</span><br><span class="line">2拿到了第1票</span><br><span class="line">3拿到了第-1票</span><br><span class="line">1拿到了第0票</span><br></pre></td></tr></table></figure>

<p>并发的例子-龟兔赛跑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.plaf.TableHeaderUI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: TaifengLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 多线程模拟龟兔赛跑，兔子中间睡会儿觉，最终看谁先到终点先胜利</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>) &amp;&amp; i%<span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断比赛是否结束</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = gameover(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--&gt;跑了&quot;</span> + i + <span class="string">&quot;步&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameover</span><span class="params">(<span class="keyword">int</span> steps)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span> (winner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;&#123;</span><br><span class="line">            <span class="keyword">if</span> (steps == <span class="number">100</span>) &#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;The winner is: &quot;</span> + winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Callable接口–-gt-实现Callable接口（了解）"><a href="#Callable接口–-gt-实现Callable接口（了解）" class="headerlink" title="Callable接口–&gt;实现Callable接口（了解）"></a>Callable接口–&gt;实现Callable接口（了解）</h2><p>自己的代码实现-网图多线程下载-实现Callable接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xidian.edu.cn.stu.ltf.multithread08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> xidian.edu.cn.stu.ltf.multithread04.MultiPhotosDownload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: TaifengLiu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现Callable多线程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImpCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;  <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">// 保存的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImpCallable</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载图片的结构体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebDowmloader1 webDowmloader = <span class="keyword">new</span> WebDowmloader1();</span><br><span class="line">        webDowmloader.downloader1(url, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为：&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ImpCallable impCallable1 = <span class="keyword">new</span> ImpCallable(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        ImpCallable impCallable2  = <span class="keyword">new</span> ImpCallable(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        ImpCallable impCallable3 = <span class="keyword">new</span> ImpCallable(</span><br><span class="line">                <span class="string">&quot;https://koper.top/images/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%AB%98%E5%B9%B6%E5%8F%91/run&amp;start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg&quot;</span>,</span><br><span class="line">                <span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以发现下面不是顺序执行，多线程</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        Future&lt;Boolean&gt; result1 = ser.submit(impCallable1);</span><br><span class="line">        Future&lt;Boolean&gt; result2 = ser.submit(impCallable2);</span><br><span class="line">        Future&lt;Boolean&gt; result3 = ser.submit(impCallable3);</span><br><span class="line">        <span class="keyword">boolean</span> r1 = result1.get();</span><br><span class="line">        <span class="keyword">boolean</span> r2 = result2.get();</span><br><span class="line">        <span class="keyword">boolean</span> r3 = result3.get();</span><br><span class="line"></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 下载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/5/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDowmloader1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader1</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常,downloader()方法出现问题&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>TLS-Attacker框架：项目复现</title>
    <url>/2021/04/24/TLS-Attacker%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="熟悉TLS-Attacker底层通信"><a href="#熟悉TLS-Attacker底层通信" class="headerlink" title="熟悉TLS-Attacker底层通信"></a>熟悉TLS-Attacker底层通信</h1><h2 id="ATTacks"><a href="#ATTacks" class="headerlink" title="ATTacks"></a>ATTacks</h2><h2 id="TLS-Core"><a href="#TLS-Core" class="headerlink" title="TLS-Core"></a>TLS-Core</h2><h3 id="constants-Packages"><a href="#constants-Packages" class="headerlink" title="constants(Packages)"></a>constants(Packages)</h3><h4 id="AlertByteLength-class"><a href="#AlertByteLength-class" class="headerlink" title="AlertByteLength.class"></a>AlertByteLength.class</h4><h4 id="AlertDescription-class"><a href="#AlertDescription-class" class="headerlink" title="AlertDescription.class"></a>AlertDescription.class</h4><h4 id="AlertLevel-class"><a href="#AlertLevel-class" class="headerlink" title="AlertLevel.class"></a>AlertLevel.class</h4><h4 id="AlgorithmResolver-class"><a href="#AlgorithmResolver-class" class="headerlink" title="AlgorithmResolver.class"></a>AlgorithmResolver.class</h4><p>由密码组件解析出各种元件算法并返回：</p>
<ol>
<li>PRF算法</li>
<li>Digest算法</li>
<li>KeyExchange算法</li>
<li>CertificateKey类型</li>
<li>RequiredKeystore（公钥）算法</li>
<li>Cipher算法</li>
<li>BulkCipher算法</li>
<li>Cipher类型</li>
<li>Mac算法</li>
<li>HKDF算法</li>
</ol>
<h4 id="AuthzDataFormat-class"><a href="#AuthzDataFormat-class" class="headerlink" title="AuthzDataFormat.class"></a>AuthzDataFormat.class</h4><p>认证授权的标准</p>
<h4 id="Bits-class"><a href="#Bits-class" class="headerlink" title="Bits.class"></a>Bits.class</h4><p>定义1字节==8比特</p>
<h4 id="BulkCipherAlgorithm-class"><a href="#BulkCipherAlgorithm-class" class="headerlink" title="BulkCipherAlgorithm.class"></a>BulkCipherAlgorithm.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: NULL,IDEA,DESede,DES40,DES,RC4,RC2,FORTEZZA,CAMELLIA,SEED,ARIA,CHACHA20_POLY1305,GOST28147,AES,SMS4;</span><br></pre></td></tr></table></figure>

<h4 id="CachedInfoType-class"><a href="#CachedInfoType-class" class="headerlink" title="CachedInfoType.class"></a>CachedInfoType.class</h4><p>缓存的信息类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: CERT((byte) 1), CERT_REQ((byte) 2)</span><br></pre></td></tr></table></figure>

<h4 id="CertificateKeyType-class"><a href="#CertificateKeyType-class" class="headerlink" title="CertificateKeyType.class"></a>CertificateKeyType.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: DH,ECDH,RSA,DSS,ECDSA,GOST01,GOST12,FORTEZZA,ECNRA,NONE,SM2</span><br></pre></td></tr></table></figure>

<h4 id="CertificateStatusRequestType-class"><a href="#CertificateStatusRequestType-class" class="headerlink" title="CertificateStatusRequestType.class"></a>CertificateStatusRequestType.class</h4><p>证书状态请求类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: OCSP((int) 1), OCSP_multi((int) 2)</span><br></pre></td></tr></table></figure>

<h4 id="CertificateType-class"><a href="#CertificateType-class" class="headerlink" title="CertificateType.class"></a>CertificateType.class</h4><p>证书类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: X509((byte) 0), OPEN_PGP((byte) 1), RAW_PUBLIC_KEY((byte) 2)</span><br></pre></td></tr></table></figure>

<h4 id="CertificateVerifiyConstants-class"><a href="#CertificateVerifiyConstants-class" class="headerlink" title="CertificateVerifiyConstants.class"></a>CertificateVerifiyConstants.class</h4><p>证书验证常量的全局变量定义</p>
<h4 id="ChangeCipherSpecByteLength-class"><a href="#ChangeCipherSpecByteLength-class" class="headerlink" title="ChangeCipherSpecByteLength.class"></a>ChangeCipherSpecByteLength.class</h4><p>定义了Change Cipher Spec密钥变更协议的类型长度（固定）<em>TYPE_LENGTH</em> = 1</p>
<h4 id="ChooserType-class"><a href="#ChooserType-class" class="headerlink" title="ChooserType.class"></a>ChooserType.class</h4><p>定义了选择器的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: DEFAULT</span><br></pre></td></tr></table></figure>

<h4 id="CipherAlgorithm-class"><a href="#CipherAlgorithm-class" class="headerlink" title="CipherAlgorithm.class"></a>CipherAlgorithm.class</h4><p>对称密码算法及其到Java名称的映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">NULL(0, 0, 0, 0),</span><br><span class="line">RC2_128(16, 8, 0, 8, &quot;RC2&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">RC4_128(16, 0, 0, 0, &quot;RC4&quot;),</span><br><span class="line">DES_CBC(8, 8, 0, 8, &quot;DES&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">DES_EDE_CBC(24, 8, 0, 8, &quot;DESede&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">AES_128_CBC(16, 16, 0, 16, &quot;AES&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">AES_256_CBC(32, 16, 0, 16, &quot;AES&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">AES_128_GCM(16, 4, 8, 16, &quot;AES&#x2F;GCM&#x2F;NoPadding&quot;),</span><br><span class="line">AES_256_GCM(32, 4, 8, 16, &quot;AES&#x2F;GCM&#x2F;NoPadding&quot;),</span><br><span class="line">CAMELLIA_128_CBC(16, 16, 0, 16, &quot;Camellia&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">CAMELLIA_256_CBC(32, 16, 0, 16, &quot;Camellia&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">CAMELLIA_128_GCM(16, 16, 8, 16, &quot;Camellia&#x2F;GCM&#x2F;NoPadding&quot;),</span><br><span class="line">CAMELLIA_256_GCM(32, 16, 8, 16, &quot;Camellia&#x2F;GCM&#x2F;NoPadding&quot;),</span><br><span class="line">IDEA_128(16, 8, 0, 8, &quot;IDEA&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">SEED_CBC(16, 16, 0, 16, &quot;SEED&#x2F;CBC&#x2F;NoPadding&quot;),</span><br><span class="line">AES_128_CCM(16, 4, 8, 16, &quot;AES&#x2F;CCM&#x2F;NoPadding&quot;),</span><br><span class="line">AES_256_CCM(32, 4, 8, 16, &quot;AES&#x2F;CCM&#x2F;NoPadding&quot;),</span><br><span class="line">ChaCha20Poly1305(32, 12, 0, 0, &quot;ChaCha20Poly1305&quot;),</span><br><span class="line">DES40_CBC(8, 8, 0, 8, &quot;DES&#x2F;CBC&#x2F;NoPadding&quot;), &#x2F;&#x2F; currently uses des 56bit</span><br><span class="line">ARIA_128_CBC(16, 16, 0, 16, &quot;ARIA&#x2F;CBC&#x2F;NoPadding&quot;), &#x2F;&#x2F; not tested yet</span><br><span class="line">ARIA_256_CBC(32, 16, 0, 16, &quot;ARIA&#x2F;CBC&#x2F;NoPadding&quot;), &#x2F;&#x2F; not tested yet</span><br><span class="line">ARIA_128_GCM(16, 16, 8, 16, &quot;ARIA&#x2F;GCM&#x2F;NoPadding&quot;), &#x2F;&#x2F; not tested yet</span><br><span class="line">ARIA_256_GCM(16, 16, 8, 16, &quot;ARIA&#x2F;GCM&#x2F;NoPadding&quot;), &#x2F;&#x2F; not tested yet</span><br><span class="line">GOST_28147_CNT(32, 8, 0, 8, &quot;GOST28147&#x2F;ECB&#x2F;NoPadding&quot;),</span><br><span class="line">FORTEZZA_CBC(0, 0, 0, 0),&#x2F;&#x2F; TODO</span><br><span class="line">SMS4_GCM(0, 0, 0, 0);   &#x2F;&#x2F;添加GmSSL支持的对称密码算法</span><br></pre></td></tr></table></figure>

<h4 id="CipherSuite-class"><a href="#CipherSuite-class" class="headerlink" title="CipherSuite.class"></a>CipherSuite.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">&#x2F;&#x2F; GmSSL CipherSuites  添加GM的8个密码组件</span><br><span class="line">ECDHE_SM4_SM3(0xE011),</span><br><span class="line">ECC_SM4_SM3(0xE013),</span><br><span class="line">IBSDH_SM4_SM3(0xE015),</span><br><span class="line">IBC_SM4_SM3(0xE017),</span><br><span class="line">RSA_SM4_SM3(0xE019),</span><br><span class="line">RSA_SM4_SHA1(0xE01a),</span><br><span class="line">ECDHE_SM2_WITH_SMS4_SM3(0xE102),</span><br><span class="line">ECDHE_SM2_WITH_SMS4_GCM_SM3(0xE107);</span><br></pre></td></tr></table></figure>

<h4 id="CipherType-class"><a href="#CipherType-class" class="headerlink" title="CipherType.class"></a>CipherType.class</h4><p>密码类型：流密码，分组密码，AEAD密码（密码组件有GCM模式的都是AEAD密码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: STREAM, BLOCK, AEAD</span><br></pre></td></tr></table></figure>

<h4 id="ClientAuthenticationType-class"><a href="#ClientAuthenticationType-class" class="headerlink" title="ClientAuthenticationType.class"></a>ClientAuthenticationType.class</h4><p>客户端身份验证类型，参考<a href="https://tools.ietf.org/html/rfc5077#section-4">RFC-4077第4节</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: </span><br><span class="line">ANONYMOUS((byte) 0x00),  &#x2F;&#x2F;匿名</span><br><span class="line">CERTIFICATE_BASED((byte) 0x01),  &#x2F;&#x2F;基于证书</span><br><span class="line">PSK((byte) 0x02);  &#x2F;&#x2F;PSK</span><br></pre></td></tr></table></figure>

<h4 id="ClientCertificateType-class"><a href="#ClientCertificateType-class" class="headerlink" title="ClientCertificateType.class"></a>ClientCertificateType.class</h4><p>客户端证书类型，参考<a href="http://tools.ietf.org/html/rfc5246#section-7.4.4">RFC-5246第7.4.4节</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">RSA_SIGN((byte) 1),</span><br><span class="line">DSS_SIGN((byte) 2),</span><br><span class="line">RSA_FIXED_DH((byte) 3),</span><br><span class="line">DSS_FIXED_DH((byte) 4),</span><br><span class="line">RSA_EPHEMERAL_DH_RESERVED((byte) 5),</span><br><span class="line">DSS_EPHEMERAL_DH_RESERVED((byte) 6),</span><br><span class="line">FORTEZZA_DMS_RESERVED((byte) 20),</span><br><span class="line">GOSTR34101994((byte) 21),</span><br><span class="line">GOSTR34102001((byte) 22),</span><br><span class="line">ECDSA_SIGN((byte) 64), &#x2F;&#x2F; TODO Implement these</span><br><span class="line">RSA_FIXED_ECDH((byte) 65),</span><br><span class="line">ECDSA_FIXED_ECDH((byte) 66),</span><br><span class="line">GOST_SIGN256((byte) 66),</span><br><span class="line">GOST_SIGN512((byte) 67),</span><br><span class="line">GOSTR34102012_256((byte) 238),</span><br><span class="line">GOSTR34102012_512((byte) 239);</span><br></pre></td></tr></table></figure>

<h4 id="CompressionMethod-class"><a href="#CompressionMethod-class" class="headerlink" title="CompressionMethod.class"></a>CompressionMethod.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：NULL((byte) 0x00), DEFLATE((byte) 0x01), LZS((byte) 0x40);</span><br></pre></td></tr></table></figure>

<h4 id="DigestAlgorithm-class"><a href="#DigestAlgorithm-class" class="headerlink" title="DigestAlgorithm.class"></a>DigestAlgorithm.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum: </span><br><span class="line">SSL_DIGEST(&quot;&quot;),</span><br><span class="line">LEGACY(&quot;&quot;),</span><br><span class="line">SHA256(&quot;SHA-256&quot;),</span><br><span class="line">SHA384(&quot;SHA-384&quot;),</span><br><span class="line">GOSTR3411(&quot;GOST3411&quot;),</span><br><span class="line">GOSTR34112012_256(&quot;GOST3411-2012-256&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="ECPointFormat-class"><a href="#ECPointFormat-class" class="headerlink" title="ECPointFormat.class"></a>ECPointFormat.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">UNCOMPRESSED((byte) 0),</span><br><span class="line">ANSIX962_COMPRESSED_PRIME((byte) 1),</span><br><span class="line">ANSIX962_COMPRESSED_CHAR2((byte) 2);</span><br></pre></td></tr></table></figure>

<h4 id="EllipticCurveType-class"><a href="#EllipticCurveType-class" class="headerlink" title="EllipticCurveType.class"></a>EllipticCurveType.class</h4><p>椭圆曲线类型在文档<a href="https://tools.ietf.org/html/rfc4492#section-5.4">RFC-4492第5.4节</a>中定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：</span><br><span class="line">EXPLICIT_PRIME((byte) 1),</span><br><span class="line">EXPLICIT_CHAR2((byte) 2),</span><br><span class="line">NAMED_CURVE((byte) 3);</span><br></pre></td></tr></table></figure>

<h4 id="EsniDnsKeyRecordVersion-class"><a href="#EsniDnsKeyRecordVersion-class" class="headerlink" title="EsniDnsKeyRecordVersion.class"></a>EsniDnsKeyRecordVersion.class</h4><p>ESNI DNS密钥记录版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：</span><br><span class="line">NULL(null),</span><br><span class="line">VERSION_FF01(new byte[] &#123; (byte) 0xff, (byte) 0x01 &#125;),</span><br><span class="line">VERSION_FF02(new byte[] &#123; (byte) 0xff, (byte) 0x02 &#125;),</span><br><span class="line">VERSION_FF03(new byte[] &#123; (byte) 0xff, (byte) 0x03 &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="EsniVersion-class"><a href="#EsniVersion-class" class="headerlink" title="EsniVersion.class"></a>EsniVersion.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：</span><br><span class="line">DRAFT_0(EsniDnsKeyRecordVersion.NULL),</span><br><span class="line">DRAFT_1(EsniDnsKeyRecordVersion.VERSION_FF01),</span><br><span class="line">DRAFT_2(EsniDnsKeyRecordVersion.VERSION_FF01),</span><br><span class="line">DRAFT_3(EsniDnsKeyRecordVersion.VERSION_FF02),</span><br><span class="line">DRAFT_4(EsniDnsKeyRecordVersion.VERSION_FF03),</span><br><span class="line">DRAFT_5(EsniDnsKeyRecordVersion.VERSION_FF03);</span><br></pre></td></tr></table></figure>

<h4 id="ExtensionByteLength-class"><a href="#ExtensionByteLength-class" class="headerlink" title="ExtensionByteLength.class"></a>ExtensionByteLength.class</h4><p>定义了各种拓展字节部分的字节长度（全局常量）</p>
<h4 id="ExtensionType-class"><a href="#ExtensionType-class" class="headerlink" title="ExtensionType.class"></a>ExtensionType.class</h4><p>定义了各种拓展的类型</p>
<h4 id="FiniteFieldGroups-class"><a href="#FiniteFieldGroups-class" class="headerlink" title="FiniteFieldGroups.class"></a>FiniteFieldGroups.class</h4><p>有限域群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：</span><br><span class="line">FFDHE2048(new byte[] &#123; 01, 00 &#125;),</span><br><span class="line">FFDHE3072(new byte[] &#123; 01, 01 &#125;),</span><br><span class="line">FFDHE4096(new byte[] &#123; 01, 02 &#125;),</span><br><span class="line">FFDHE6144(new byte[] &#123; 01, 03 &#125;),</span><br><span class="line">FFDHE8192(new byte[] &#123; 01, 04 &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="GOSTCurve-class"><a href="#GOSTCurve-class" class="headerlink" title="GOSTCurve.class"></a>GOSTCurve.class</h4><h4 id="HandshakeMessageType-class"><a href="#HandshakeMessageType-class" class="headerlink" title="HandshakeMessageType.class"></a>HandshakeMessageType.class</h4><p>TLS协议握手协议的消息类型，共22种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum：</span><br><span class="line">UNKNOWN((byte) 255),</span><br><span class="line">HELLO_REQUEST((byte) 0),</span><br><span class="line">CLIENT_HELLO((byte) 1),</span><br><span class="line">SSL2_CLIENT_HELLO((byte) 1),</span><br><span class="line">SERVER_HELLO((byte) 2),</span><br><span class="line">SSL2_CLIENT_MASTER_KEY((byte) 2),</span><br><span class="line">HELLO_VERIFY_REQUEST((byte) 3),</span><br><span class="line">NEW_SESSION_TICKET((byte) 4),</span><br><span class="line">SSL2_SERVER_HELLO((byte) 4),</span><br><span class="line">END_OF_EARLY_DATA((byte) 5),</span><br><span class="line">SSL2_SERVER_VERIFY((byte) 5),</span><br><span class="line">HELLO_RETRY_REQUEST((byte) 6),</span><br><span class="line">ENCRYPTED_EXTENSIONS((byte) 8),</span><br><span class="line">CERTIFICATE((byte) 11),</span><br><span class="line">SERVER_KEY_EXCHANGE((byte) 12),</span><br><span class="line">CERTIFICATE_REQUEST((byte) 13),</span><br><span class="line">SERVER_HELLO_DONE((byte) 14),</span><br><span class="line">CERTIFICATE_VERIFY((byte) 15),</span><br><span class="line">CLIENT_KEY_EXCHANGE((byte) 16),</span><br><span class="line">FINISHED((byte) 20),</span><br><span class="line">CERTIFICATE_STATUS((byte) 22),</span><br><span class="line">SUPPLEMENTAL_DATA((byte) 23);</span><br></pre></td></tr></table></figure>

<h4 id="HandshakeByteLength-class"><a href="#HandshakeByteLength-class" class="headerlink" title="HandshakeByteLength.class"></a>HandshakeByteLength.class</h4><h4 id="HashAlgorithm-class"><a href="#HashAlgorithm-class" class="headerlink" title="HashAlgorithm.class"></a>HashAlgorithm.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">NONE(&quot;&quot;),</span><br><span class="line">MD5(&quot;MD5&quot;),</span><br><span class="line">SHA1(&quot;SHA-1&quot;),</span><br><span class="line">SHA224(&quot;SHA-224&quot;),</span><br><span class="line">SHA256(&quot;SHA-256&quot;),</span><br><span class="line">SHA384(&quot;SHA-384&quot;),</span><br><span class="line">SHA512(&quot;SHA-512&quot;),</span><br><span class="line">GOSTR3411(&quot;GOST3411&quot;),</span><br><span class="line">GOSTR34112012_256(&quot;GOST3411-2012-256&quot;),</span><br><span class="line">GOSTR34112012_512(&quot;GOST3411-2012-512&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="HeartbeatMessageType-class"><a href="#HeartbeatMessageType-class" class="headerlink" title="HeartbeatMessageType.class"></a>HeartbeatMessageType.class</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:</span><br><span class="line">HEARTBEAT_REQUEST((byte) 1),</span><br><span class="line">HEARTBEAT_RESPONSE((byte) 2);</span><br></pre></td></tr></table></figure>

<h4 id="HeartbeatByteLength-class"><a href="#HeartbeatByteLength-class" class="headerlink" title="HeartbeatByteLength.class"></a>HeartbeatByteLength.class</h4>]]></content>
      <tags>
        <tag>github project</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: Scalable Scanning and Automatic Classification of TLS Padding Oracle Vulnerabilities</title>
    <url>/2021/04/24/Paper-Reading-Scalable-Scanning-and-Automatic-Classification-of-TLS-Padding-Oracle-Vulnerabilities/</url>
    <content><![CDATA[<h1 id="「TLS-Padding-Oracle漏洞的可拓展扫描和自动分类」"><a href="#「TLS-Padding-Oracle漏洞的可拓展扫描和自动分类」" class="headerlink" title="「TLS Padding Oracle漏洞的可拓展扫描和自动分类」"></a>「TLS Padding Oracle漏洞的可拓展扫描和自动分类」</h1><p>该论文发表在第28次USS会议上，<a href="https://www.youtube.com/results?search_query=Scalable+Scanning+and+Automatic+Classification+of+TLS+Padding+Oracle+Vulnerabilities">USS会议演讲视频</a>，<a href="https://www.youtube.com/results?search_query=Scalable+Scanning+and+Automatic+Classification+of+TLS+Padding+Oracle+Vulnerabilities">国际密码研究协会演讲视频</a></p>
<p>论文项目也已在Github上开源：<a href="https://github.com/tls-attacker/TLS-Padding-Oracles">TLS Padding Oracles</a></p>
<p>相关：<a href="https://pentesterlab.com/exercises/padding_oracle/course">PentesterLab: Padding Oracle攻击实战</a></p>
<ul>
<li><strong>文章结构请看右边的目录</strong>👉</li>
</ul>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>TLS协议在现代Internet上提供加密、数据完整性和身份验证。尽管该协议很重要，但目前部署的TLS版本使用的是过时的加密算法，这些算法已被各种攻击攻破。此类攻击的一个突出类别是CBC Padding Oracle（CBC填充预示）攻击。这些攻击使得攻击者能够通过观察取决于CBC填充有效性的不同服务器行为来解密TLS通信数据。</p>
<p>我们首次对现代互联网上TLS实现中的CBC Padding Oracle进行了大规模扫描。我们的扫描显示Alexa排名前百万的网站中有1.83%的网站存在漏洞，且检测到近100个不同的漏洞。我们的扫描仪能观察到服务器行为的细微差别，例如使用不同的TLS Alert或使用不同的TCP Header标志进行响应。</p>
<p>我们使用了一种新的扫描方法，包括三个步骤。首先，我们创建了一大组探探针，以相当高的扫描成本来检测漏洞。然后，我们使用初步扫描减少了探针的数量，使得这样一组较小的探针具有相同的检测率，但足够小，可以用于大规模扫描。最后，我们使用减少的探针集合进行大规模扫描，并用一种新的方法使用图形绘制算法对我们的发现进行了聚类。</p>
<p>与普遍的看法相反，利用CBC Padding Oracle并不一定需要执行精确的计时测量。我们检测到只需观察不同服务器响应的内容即可利用该漏洞。这些漏洞在实践中构成的威胁比之前设想的要大得多。</p>
<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>在2002年，Vaudenay提出了一种攻击，该攻击的目标是通过密码块链接（CBC）操作模式加密的消息[39]。该攻击利用了CBC模式的可延展性，该模式允许更改密文，以便在不了解加密密钥的情况下翻转特定的明文位。攻击需要服务器解密消息，并根据消息的有效性以1或0响应。这种行为从本质上为攻击者提供了一个加密预言，该预言可用于发起自适应选择密文攻击。攻击者利用这种行为通过执行自适应查询来解密消息。Vaudenay开发出了一种特殊形式的易受攻击的行为，其中的执行会验证CBC填充结构并相应地响应1或0。</p>
<p>此类攻击被称为padding oracle攻击。演示了不同形式的padding oracle攻击可以破坏加密硬件[6]、XML加密[23]或诸如Java Server Faces [33]和ASP.NET Web应用程序[15]之类的Web技术。 Rizzo和Duong使用padding oracle攻击来窃取秘密并伪造身份验证令牌，从而获得对敏感数据的访问权[15]。在所有这些工作中，攻击者能够使用一个直接的侧信道（不同的错误消息）来实例化padding oracle并解密机密数据。</p>
<p>传输层安全（TLS）在MAC-then-Pad-then-Encrypt方案中采用了CBC模式，这使其很可能受到这些攻击。实际上，已经有人使用了不同类型的CBC Padding Oracle来破坏TLS的保密连接[39，4，3，20]。所有这些攻击都要求攻击者执行精确的计时测量。该要求源于TLS协议的属性。建立TLS连接后，所有TLS错误消息均以加密方式发送，并且长度相同。因此，即使攻击者能够使服务器发送不同的错误消息，攻击者通常也无法在不同的加密响应之间进行区分。</p>
<p>由于大多数先前的分析仅基于计时侧信道来分析padding oracle攻击，因此他们需要在本地环境中测试实现。这些评估发现了许多新漏洞[4、3、20]。但是，针对这些漏洞实施适当的对策非常具有挑战性，并且需要复杂的恒定时间来实现。实施此类对策可能会引入新的攻击也就不足为奇了。例如，为了修复Lucky 13 Padding Oracle，OpenSSL密码库引入了一个不同的漏洞，其中OpenSSL以不同的TLS警报消息进行响应[37]。因此，分析实验室环境中的实现需要对不同实现的每个新版本进行费力的测试。这显然是不现实的，因此这种分析是偶尔执行的。</p>
<p>考虑到恒定时间TLS填充验证的复杂性，我们希望在其他实现中也可能引入类似于OpenSSL [37]引入的漏洞。因此，这项工作脱离了上面的实验室分析方法，而是使用大规模Internet扫描来评估CBC Padding Oracle。我们尝试回答以下两个问题：padding oracle漏洞的普遍程度如何？这些攻击是否只能通过使用定时辅助信道来利用？</p>
<ul>
<li><p><strong>贡献：</strong>在我们的工作中，我们采用了一种新颖的扫描方法，该方法能够大规模扫描TLS CBC Padding Oracle。 我们使用这种方法来发现新的Padding Oracle漏洞并执行负责任的披露。 我们确定了近100种不同的Padding Oracle。 我们表明，其中的某些功能可以在没有细微时序侧信道的情况下被利用，因此与最近发现的Padding Oracle相比，在实践中构成了显着更大的威胁。</p>
</li>
<li><p><strong>新的大规模扫描方法：</strong>大规模扫描padding oracle是一项挑战。这种扫描通过发送不同格式错误的输入并观察服务器行为来检测漏洞。如Böck等人所示 [9]，在某些情况下，这些输入仅在使用特定的TLS版本或密码套件时触发漏洞。使用协议版本、密码套件和格式错误的输入的所有可能组合进行扫描是不可行的，因为这将需要与每个扫描主机建立大量连接。我们通过仔细选择一组探针克服了这一限制，从而可以进行有效的大规模扫描。我们系统地分析了先前在文献[39、4、3、20、37、27、25、10、29、28]中描述的padding oracle。然后，我们仔细选择了25个表现出padding oracle格式错误的输入，我们将其称为格式错误的记录。这些TLS记录展示了有效填充和无效填充以及MAC的不同组合，并且是使用TLS-Attacker框架生成的[37]。即使只有25个格式错误的记录，使用格式错误的记录、TLS版本和密码套件的各种组合进行扫描也是不切实际的。我们将这些组合称为测试向量。我们对具有所有测试向量的50,000个随机TLS主机进行了初步扫描。然后，我们减少了测试向量集，以使在初步扫描中发现的所有漏洞仍然由减少的向量集触发。我们能够在三天内使用减少的测试向量集扫描Alexa前100万个网站。与[9]相似，我们的扫描器不仅在TLS层而且在TCP层观察到不同的服务器响应。我们的结果表明，大约1.83％的TLS服务器易受CBC Padding Oracle攻击。</p>
</li>
<li><p><strong>尽可能减少误报：</strong>当主机首次显示易受攻击的行为时，我们将对其进行重新扫描以确保该行为不是扫描伪像。 如果主机在对我们的每个测试向量的三个独立扫描中具有相同的响应，则我们仅认为它是易受攻击的。 根据此标准，不太可能将主机错误地标记为易受攻击的主机。 因此，我们认为我们的脆弱性统计数据是保守的较低估计值。</p>
</li>
<li><p><strong>近100个不同的padding oracle漏洞：</strong>必须将检测到的漏洞进行聚类以通知不同的供应商。到目前为止，这是手动完成的[9]。为了自动实现此目的，我们针对较大的测试向量集重新扫描了易受攻击的主机。我们将宿主对所有测试向量的响应集称为宿主的响应图。此响应图实质上是主机漏洞的指纹。然后，我们根据扫描的主机的响应图对其进行聚类。该过程确定了93个不同的响应图，即93个不同的漏洞。这些漏洞包括不同的行为，范围从具有不同TLS警报消息的典型padding oracle[39]到特定无效MAC字节触发的TCP连接超时，或在使用无效填充值时观察到的关闭连接。我们将不同的响应图视为不同的漏洞，我们认为这是计算漏洞的自然方法，因为它捕获了在相似但不同的实现中发生的相同漏洞的情况。考虑两个主机对所有测试向量的响应相同。这些主机可能共享实现的相同或非常相似的部分，从而导致漏洞显示具有相同的响应图。但是，它们不一定共享相同的代码。他们可能使用同一TLS库的不同版本，或者使用具有共享组件的两个不同的库。</p>
</li>
<li><p><strong>易受攻击主机的有效群集：</strong>在我们向受影响的各方有责任地披露我们的发现之前，我们先根据脆弱性主机的响应图对其进行分组。 为了进一步完善我们的分组服务器，我们使用了一种基于二维力导向图的图形FortAtlas2算法[21]。 该算法使我们能够创建易受攻击的服务器主机的图表，从而有效地处理我们负责的披露流程。</p>
</li>
<li><p><strong>可以利用的新漏洞：</strong>为了利用填充漏洞，攻击者需要区分不同的响应，以区分正确和不正确的填充。 在TLS中通常不是这种情况：即使服务器发送两个不同的警报消息，消息也会被加密，并且攻击者无法观察到差异。 因此，以前的大多数针对TLS的padding oracle攻击都依赖于计时度量来区分不同的错误情况[4、3、20]。 但是，我们表明，许多TLS实现都会显示出正确填充和错误填充之间的明显差异。 例如，在一种错误情况下，服务器可能会优雅地关闭TCP连接，而在另一种情况下，服务器可能会不优雅地关闭它。 同样，某些服务器会根据特定的填充错误发送不同数量的警报消息，两种行为都很容易观察到。</p>
</li>
<li><p><strong>负责人的披露和道德考量：</strong>与受影响的网站所有者合作，我们以负责任的态度向几家脆弱的供应商披露了我们的发现。 成功攻击的结果是，攻击者能够解密在TLS连接中重复传输的秘密值。 通过执行扫描，我们无法重建服务器私钥或其他机密数据。 我们使用伪数据执行扫描，从未尝试解密真实用户流量。 我们以负责任的方式向以下供应商和受影响的各方披露了我们的发现：IBM，Amazon，Slack，Cisco，Citrix，Oracle，Heroku，Netflix，Sonicwall，Venmo和Vine。</p>
</li>
</ul>
<h1 id="二、背景"><a href="#二、背景" class="headerlink" title="二、背景"></a>二、背景</h1><p>TLS协议在现代Internet上提供了机密性、完整性和认证性。该协议的最新版本是TLS 1.3 [31]。在撰写本文时，此版本正在逐步使用。在完全部署TLS 1.3之前，被广泛使用的最新版本是TLS 1.2 [14]。现代的客户端和服务器通常还支持两个以前的版本，即TLS 1.0和1.1 [12，13]。在本文的其余部分中，我们仅讨论1.0至1.2版本，这些版本今天已普遍使用并具有相似的结构。 TLS协议包含两个阶段。在称为握手的第一阶段，客户端和服务器选择将用于会话的密码算法并建立会话密钥。在第二阶段，对等方可以安全地发送和接收应用程序数据，这些数据使用上一阶段中建立的密钥和算法进行加密和身份验证。密码算法的上述选择称为TLS密码套件[14]。更确切地说，密码套件是针对所有必需的加密任务的具体算法选择。密码套件是通过将它们对这些算法的选择进行串联来命名的。例如，密码套件TLS_RSA_WITH_AES_128_CBC_SHA使用RSA公钥加密以便在第一阶段建立共享会话密钥，并且还使用具有128位密钥和基于SHA-1的HMAC的对称AES-CBC加密，以便在第二阶段加密和认证数据。</p>
<h2 id="TLS握手协议"><a href="#TLS握手协议" class="headerlink" title="TLS握手协议"></a>TLS握手协议</h2><p>客户端使用ClientHello消息发起TLS握手。此消息通告客户端支持的TLS版本和密码套件。然后，服务器使用指定所选密码套件的ServerHello消息进行响应。它还在证书消息中发送其证书，并通过ServerHelloDone消息指示传输结束。然后，客户端生成一个称为预主密码的秘密值，在服务器的RSA密钥下对其进行加密，并在ClientKeyExchange消息中发送加密的密文。在共享了预主秘密的知识之后，双方现在基于预主秘密推导要在会话中使用的对称加密和MAC密钥。最后，双方都发送ChangeCipherSpec和Finish消息。ChangeCipherSpec消息通知接收方后续消息将根据会话密钥并使用密码套件中指定的对称加密和HMAC算法进行加密和验证。完成的消息包含基于从预主秘密派生的密钥对所有先前握手消息计算的HMAC。由于此消息是在ChangeCipherSpec消息之后发送的，因此它是会话中使用对称加密和MAC进行加密和验证的第一条消息。如果完成的消息在两端都正确解密和验证，则双方现在都可以安全地交换应用程序数据。</p>
<h2 id="CBC分组密码链接模式"><a href="#CBC分组密码链接模式" class="headerlink" title="CBC分组密码链接模式"></a>CBC分组密码链接模式</h2><p>TLS中可能的加密算法有很多，但本文主要研究的是CBC加密模式。在CBC模式下，每个明文块在被块密码加密之前与前一个密文块进行异或运算。形式上，如果我们用Pi表示明文块（i=0，…），密文块用Ci表示，并且用密钥k下的块密码加密为Enck()，则Ci=Enck(Pi⊕C(i−1))，(i=1，…)。除了第一个块之外的所有块都是如此，在第一个块中没有先前的密文块，相反，该块在加密之前与初始化向量(IV)进行异或运算：C0=Enck(P0⊕IV)。</p>
<ul>
<li><strong>CBC模式的延展性：</strong>CBC模式允许攻击者在不知道对称密钥的情况下执行有意义的明文修改。具体地说，假设攻击者知道原始明文Pi的某个块，并且想要更改密文，使得块i改为解密为Pi’。攻击者可以将先前的密文块C(i−1)更改为C(i−1)=C(i−1)’⊕Pi⊕Pi’。这是以破坏前一个块为代价的，该块现在被解密为攻击者通常无法预测的值。此外，攻击者可以在使用此技术时更改块的顺序。如果攻击者知道明文块Pi并用Ci替换密文块Cj，则块j现在将解密为Pj’=Pi⊕C(i−1)⊕C(j−1)。CBC模式的这种“延展性”特性已经被用于许多密码攻击，也是本文介绍的攻击的基石。</li>
</ul>
<h2 id="TLS记录层"><a href="#TLS记录层" class="headerlink" title="TLS记录层"></a>TLS记录层</h2><p>TLS记录层封装协议消息。本质上，记录层用包含消息长度、消息类型和协议版本的报头包装协议消息。一旦交换了ChangeCipherSpec消息，后续的TLS记录将封装加密的消息。</p>
<p>在我们的工作中，我们主要关注使用CBC操作模式的密码套件。这些密码套件使用消息验证码(MAC)来保护TLS记录的真实性，并在CBC模式下使用块密码(例如，AES或3DES)加密应用程序数据。TLS规范规定了MAC-Then-Pad-Then-Encrypt机制[14]。加密器首先计算明文上的MAC，将MAC连接到明文，填充消息以使其长度是块长度的倍数，最后在CBC模式下使用分组密码加密MAC和填充的明文。</p>
<p>TLS指定填充字节的精确值，填充明文的最后一个字节指定使用多少个填充字节，不包括最后一个字节。其余填充字节的值与最后一个字节的值相同。例如，如果使用4个填充字节(包括最后一个字节)，则所有4个字节的值将为0x03。</p>
<p>为了演示整个过程，如果加密器使用TLS_RSA_WITH_AES_128_CBC_SHA密码套件加密5个字节的数据，他将使用HMAC-SHA(其输出为20字节长，固定长度输出)和AES-CBC。对原始明文应用HMAC-SHA后，连接长度为25字节，适合两个AES 16字节块（AES是分16字节块加密，也即128bit位块加密）。加密器通常会选择最小可行填充量，在本例中为7字节。第一个块包含数据和前11个HMAC字节。第二个块包含剩余的9个HMAC字节和7个字节的填充0x06，见图1。请注意，加密器还可以选择较长的填充，并附加23、39、…或247个填充字节(同时相应地设置填充字节的值)。</p>
<p><img src="/images/USS-2020-paper/Figure-1.jpg" alt="Figure-1：当使用AES-CBC和HMAC-SHA处理5个明文字节时，加密器需要附加20个字节的HMAC-SHA输出和7个字节的填充"></p>
<h1 id="三、Padding-Oracle漏洞的历史"><a href="#三、Padding-Oracle漏洞的历史" class="headerlink" title="三、Padding Oracle漏洞的历史"></a>三、Padding Oracle漏洞的历史</h1><p>SSLv3和TLS中的主要设计失败之一是CBC密码套件中的MAC-then-Pad-then-Encrypt方案规范。 该方案负责对TLS实现的一系列攻击，这些攻击称为padding oracle攻击。 即使在TLS规范[14，第6.2.3.2节]中明确总结了这些对策，但其正确实施仍具有挑战性。</p>
<h2 id="Vaudenay式的Padding-Oracles攻击"><a href="#Vaudenay式的Padding-Oracles攻击" class="headerlink" title="Vaudenay式的Padding Oracles攻击"></a>Vaudenay式的Padding Oracles攻击</h2><p>2002年，Vaudenay证明了MAC-Then-Pad-Then-Encrypt方案在安全协议中引入了潜在的漏洞，其形式就是所谓的padding oracle[39]。利用这些漏洞的攻击基于CBC操作模式的延展性。我们关注的是TLS的案例。</p>
<p>使用CBC模式时，请考虑TLS记录层。解密后，解密方需要验证填充字节和MAC字节。实施这两个检查的自然方法是首先验证填充字节，如果它们验证正确，则验证MAC字节。如果填充字节无效，实现自然会发出错误消息，而不检查MAC字节。另一方面，如果填充字节有效但MAC无效，则自然会发出(可能不同的)错误消息。</p>
<p>假设解密器在这些情况下确实发出两个不同的错误消息。攻击者可以按如下方式解密任何消息块PI的最后一个字节。他将最后一个密文块设置为Ci，并用0到255之间的值替换前一个块C(i−1)的最后一个字节。如果最后一个明文字节是0x00，则填充将是有效的(其他形式的有效填充的可能性要小得多)。当填充字节被正确验证时，攻击者通过观察解密器发出“无效MAC”错误而不是“无效填充”错误来检测到这一点。攻击者在向解密器发送最多255个密文之后获知Pi的最后一个字节的值。</p>
<p>利用他对最后一个明文字节的了解，攻击者可以继续解密Pi的倒数第二个字节。通过这样做，他的目标是创建长度为2的有效填充。更广泛地说，使用这种技术，攻击者可以迭代地解密Pi中的每个字节。我们省略了对其余攻击的正式描述，请读者参考[39]。</p>
<p>请注意，上述攻击依赖于区分解密为有效和无效填充的密文的能力。因此，对于TLS实现来说，通过确保它们始终发出相同的错误消息来防止这种攻击似乎微不足道。事实上，Vaudenay并不知道攻击者可以在TLS上下文中直接区分这两种情况。原因是，即使TLS错误消息不同，也不可能区分它们，因为它们是用TLS会话密钥加密的。这是我们在工作中应对的挑战之一。</p>
<h2 id="BEAST攻击模型"><a href="#BEAST攻击模型" class="headerlink" title="BEAST攻击模型"></a>BEAST攻击模型</h2><p>Vaudenay的论文中留下了一个悬而未决的问题，那就是如何利用他所说的“爆炸性先知”——一种只有在第一次返回否定答案之前才能使用的先知。这模拟了这样的问题：一旦消息没有正确解密，TLS实现就会中止会话。因此，一旦出现第一个解密错误，依赖于TLS会话中更改消息的攻击者将无法继续攻击。</p>
<p>Canvel等人使用了一种模型，其中客户端重复连接到服务器[11]，观察到这是由于当时电子邮件客户端的轮询行为而发生的，并泄露了认证密码。BEAST攻击[34]本质上使用了相同的模型，但更依赖于现代网络浏览器的行为。在最简单的BEAST模型中，受害者被骗访问由攻击者控制的恶意网站。该网站包含使受害者浏览器重复连接到受害者网站的Javascript。然后，每个网站请求都包含用户身份验证Cookie，该Cookie由浏览器自动发送。此行为允许攻击者强制受害者重复向服务器发送加密值。</p>
<p>我们的攻击就是在这种模式下进行的。我们假设攻击者可以导致受害者客户端重复连接到受害者服务器，同时重新传输相同的敏感信息。我们还假设攻击者是中间人(MITM)，可以在传输过程中更改消息。这种模式现在已经成为现代攻击的标准文献。</p>
<h2 id="POODLE攻击"><a href="#POODLE攻击" class="headerlink" title="POODLE攻击"></a>POODLE攻击</h2><p>TLS的前身SSLv3使用类似的先MAC后Pad再加密的方案。但是，与TLS不同的是，SSLv3中填充字节的值未指定。明文的最后一个字节表示存在多少填充字节，但其余填充字节可以取任何值。</p>
<p>考虑一条具有16个填充字节的完整块的消息。明文块的最后一个字节为0x0F，前15个字节可以取任何值。因此，攻击者可以使用3.1节中描述的技术（Vaudenay攻击），用最后一个字节解密为0x0F的任何块替换最后一个块，并获得有效填充的消息。SSLv3的这一特性导致了称为“POODLE”的毁灭性攻击。有关攻击的完整描述，请参见[27]。</p>
<p>尽管POODLE依赖于SSLv3中未指定的填充字节，但令人惊讶的是，它也会影响TLS实现。本质上，不会强迫粗心的TLS开发人员在解密后验证(指定的)填充字节；即使根本不检查填充字节，TLS实现也可以很好地互操作。事实上，开发人员更容易在TLS实现中重用处理SSLv3填充的相同代码。这导致了POODLE攻击的一种变体，影响了TLS的实施[25]。即使在这两个备受瞩目的发现之后，POODLE的变种仍在不断涌现[10，29，28]。这些工作检测到了不同的TLS记录处理漏洞；一些TLS实现只验证了第一个MAC字节，其他实现跳过了对特定填充字节的验证。</p>
<h2 id="Lucky13和其他时间侧信道攻击"><a href="#Lucky13和其他时间侧信道攻击" class="headerlink" title="Lucky13和其他时间侧信道攻击"></a>Lucky13和其他时间侧信道攻击</h2><p>2013年，阿尔法登(AlFardan)和帕特森(Paterson)[4]使用类似的技术打破了TLS的机密，并将他们的攻击命名为“幸运13号”(Lucky 13)。该攻击依赖于一个重要的观察结果：在处理不同长度的输入时，常见的HMAC函数需要不同的处理时间。通过执行巧妙的填充字节操作，攻击者可以强制服务器对不同长度的明文执行HMAC计算。这是因为填充长度决定了用作HMAC函数输入的数据量。然后，攻击者可以测量不同的处理时间并了解有关填充字节的信息。我们建议读者参考[4]以获取完整的攻击描述。</p>
<p>Lucky 13的修复是将TLS实现中的MAC验证码更改为恒定时间，而不考虑处理的明文块的数量。这是可能的，但编写和维护这样的代码是困难的，即使对专家来说也是如此。2016年，Somorovsky在OpenSSL的补丁代码中发现了一个漏洞[37]。该漏洞引入了一个类似的、甚至更严重的漏洞，使得攻击者能够区分两条警报消息。如果解密的消息仅包含两个或更多有效填充块，则可以触发不同的消息。</p>
<p>亚马逊的s2n TLS库发布于2015年[24]，也就是Lucky 13攻击事件发布之后。s2n的开发者意识到了Lucky 13，并引入了特定的对策，似乎使代码保持恒定时间，从而预防了攻击。他们还引入了随机计时延迟，以便在意外情况下代码被证明是易受攻击的，从而使攻击变得更加困难。尽管做了这些努力，s2n仍然容易受到Lucky 13[3，35]变种的攻击。尽管代码已经过正式验证，但还是发现了所有漏洞。</p>
<h2 id="Bleichenbacher攻击及其变种"><a href="#Bleichenbacher攻击及其变种" class="headerlink" title="Bleichenbacher攻击及其变种"></a>Bleichenbacher攻击及其变种</h2><p>Bleichenbacher的攻击[8]也是一种padding oracle攻击。它针对的不是对称加密，而是RSA加密中使用的填充方案，称为PKCS#1v1.5。它还类似地利用RSA加密的可延展性属性，并依赖于解密器(即服务器)在无效填充明文的情况下发出错误消息。标准对策类似于CBC Padding Oracle；当在RSA解密中遇到错误状态时，服务器的行为不能有任何不同。这一反制措施已成为TLS标准的一部分。</p>
<p>然而，正确实施对策是具有挑战性的。Böck等人已扫描易受Bleichenbacher攻击的易受攻击的TLS服务器[9]。他们发现Facebook和Paypal等知名网站使用的服务器存在漏洞。有趣的是，它们的漏洞可以通过使用不同的TLS协议流或利用TCP连接状态(TCP重置或超时)触发。与CBC Padding Oracle一样，Bleichenbacher的攻击显示出类似的攻击变种序列，每隔几年就会在不同的上下文中被发现[26，22，6]。</p>
<h1 id="四、扫描与评估的方法论"><a href="#四、扫描与评估的方法论" class="headerlink" title="四、扫描与评估的方法论"></a>四、扫描与评估的方法论</h1><p>我们研究的最终目标是估计padding oracle漏洞的数量和影响，并将我们的发现报告给负责的供应商。 为此，我们分三步进行：我们首先<strong>定义</strong>一个测试向量列表，这些向量可能触发可观察到的差异，从而导致Padding Oracle。 然后，我们减少该测试向量列表，并进行大规模扫描。 最后，我们分析发现的漏洞和负责任的供应商。</p>
<h2 id="测试向量生成"><a href="#测试向量生成" class="headerlink" title="测试向量生成"></a>测试向量生成</h2><p>为了在实现中检测Padding Oracle，我们连接并发送各种格式错误的记录。这些记录包含有关Padding、MAC和App Data的不同缺陷。然后，我们观察TLS层或更低层的响应是否存在任何差异。对两个格式错误的记录作出不同响应的实现可能容易受到攻击。使用所有可能的格式错误的记录进行测试是不可行的。例如，易受攻击的实现可以正确地检查所有填充字节，除非填充字节正好是16字节长，在这种情况下，该实现不检查填充中的特定位。</p>
<p>由于可能有多达256个填充字节，所以测试所有可能的填充长度的每个位的正确有效性将需要用263,168个不同的记录进行测试。这些记录需要用不同的密码套件或协议版本进行测试，这使得这样的综合测试是不可行的。因此，我们仔细挑选了一组畸形记录（关键方案），这些记录是由先前的研究推动的。</p>
<p>我们承认，这种选择格式错误记录集的方式意味着我们只能检测到与已知漏洞相似的漏洞。然而，这种方法性价比高，非常适合大规模扫描。由于在大规模扫描期间只能将有限数量的消息发送到各个服务器，因此测试向量生成的自动方法(如模糊)通常是不可行的。</p>
<h3 id="格式错误记录"><a href="#格式错误记录" class="headerlink" title="格式错误记录"></a>格式错误记录</h3><p>我们的格式错误的记录都有80个字节长。长度相等可确保响应差异很可能是由填充Oracle漏洞引起的，而不是由不同记录长度触发的误报。异常的记录长度可能会导致与解密无关的错误；例如，如果加密的TLS记录小于MAC长度（20字节，即TLS记录长度小于20字节），则最新的OpenSSL版本会响应不同的错误消息。我们决定使用80个字节来为HMAC输出（输出为20字节）加上两个完整的填充块提供足够的空间。这允许我们构造受SHA-384保护的记录，其输出长度为48字节。（SHA-384的输出为48字节）</p>
<p>我们在下面的段落中总结了我们的25条格式错误记录。有关TLS_RSA_WITH_AES_128_CBC_SHA情况下这些错误记录的摘要，另请参见表1。</p>
<p><img src="/images/USS-2020-paper/Table-1.jpg" alt="Table-1：为TLS_RSA_WITH_AES_128_CBC_SHA构建的格式错误记录的摘要。这些列分别表示MAC和填充字节的长度、位置和修改。⊕表示对列表位置中的列表值进行异或运算。DEL表示删除列出位置中的一个字节。"></p>
<ul>
<li><p><strong>翻转的MAC位：</strong>我们从包含应用程序数据、MAC和四个填充字节的有效记录开始。（原始TLS记录）然后，我们根据该记录创建“三条”格式错误的记录：（修改原始TLS记录得到的3条新的有错误的TLS记录）</p>
<ol>
<li><p>一条是通过翻转第一个MAC字节中的最高有效位，</p>
</li>
<li><p>一条是通过翻转MAC字节中间的中间位，</p>
</li>
<li><p>另一条是通过翻转最后一个MAC字节的最低有效位。</p>
</li>
</ol>
<p>我们选择这些格式错误的记录来检测那些未完全检查MAC的实现。最近的OpenSSL漏洞[1]，其中OpenSSL只检查某些平台上每个字节的最低有效位，以及未完成MAC验证导致的进一步漏洞[29，28]，导致了特定的位翻转位置。</p>
</li>
<li><p><strong>缺少一个MAC字节：</strong>我们从包含空应用程序数据但具有有效MAC和填充的有效记录开始。（原始记录）然后，我们修改它以创建两个格式错误的记录：（由原始记录修改后的2个错误记录）</p>
<ol>
<li><p>一个删除第一个MAC字节，</p>
</li>
<li><p>另一个删除最后一个MAC字节。</p>
</li>
</ol>
<p>然后，我们在两条消息中添加另一个填充字节。这些格式错误的记录还可能触发由不完整的MAC验证引起的漏洞，并由[28]间接激发。</p>
</li>
<li><p><strong>缺少MAC字节部分：</strong>受[37]的启发，我们创建了两个格式错误的记录，它们只包含填充，而根本不包含MAC：（由原始记录修改后的到的错误记录）</p>
<ol>
<li><p>一个提供了恰好80字节的有效填充(0x4F)，</p>
</li>
<li><p>另一个提供了值为0xFF80字节的不完整填充。</p>
</li>
</ol>
<p>这个错误记录不仅缺少MAC，而且还包含无效的填充（因为如果最后一个字节的值是0xFF，则应该有256个填充字节）</p>
</li>
<li><p><strong>组合有效和无效的MAC和填充：</strong>最后一组格式错误的记录包含三种类型的有效和无效MAC和填充的组合的消息：</p>
<ol>
<li><p>有效MAC和无效填充（有3个子类型）</p>
</li>
<li><p>无效MAC和无效填充（有3个子类型）</p>
</li>
<li><p>无效MAC和有效填充（有3个子类型）</p>
</li>
</ol>
<p>对于这三种类型中的每一种，我们都创建了三个子类型，具体取决于我们翻转的位位置；</p>
<p>3个子类型：我们分别翻转第一个、中间或第16个字节中的最高有效位、中间位或最低有效位。对于这九个子类型中的每一个，我们分别创建一个包含应用程序数据的版本和一个不包含应用程序数据的版本。其中选择应用程序数据的长度，使得填充字节包含在一个纯文本块内，而没有应用程序数据的格式错误的记录包含多于一个填充块。这旨在检测只检查最后一块填充字节的实现。</p>
</li>
</ul>
<h3 id="将格式错误的记录与协议版本和密码套件组合"><a href="#将格式错误的记录与协议版本和密码套件组合" class="headerlink" title="将格式错误的记录与协议版本和密码套件组合"></a>将格式错误的记录与协议版本和密码套件组合</h3><p>我们将每个格式错误的记录与几个TLS协议版本和密码套件一起使用。如前所述，我们使用术语测试向量来指代格式错误的记录、协议版本和密码套件的组合。正如我们稍后所展示的，使用不同的协议版本和密码套件测试每个格式错误的记录是必要的；某些漏洞只有在这种特定组合下才会被触发。乍一看，这是令人惊讶的，但这实际上遵循了[9]的发现。我们推测，根据协商的版本和密码套件，实现可能使用完全不同的代码栈，而某些漏洞只存在于这些代码栈的一个子集中。</p>
<h2 id="经验检验向量规约"><a href="#经验检验向量规约" class="headerlink" title="经验检验向量规约"></a>经验检验向量规约</h2><p>根据服务器的配置，上面的测试向量集合相当大。</p>
<p>1.为什么集合大：假设一台支持TLS 1.0和TLS 1.1的服务器具有10个CBC密码套件，那么将有10·2·25=500个测试向量。（请注意，每个测试向量都需要建立新的TLS连接并执行昂贵的握手）</p>
<p>2.不足之处：如此大量的测试向量不允许我们执行大规模扫描。另一方面，删除测试向量可能会导致漏报和漏掉漏洞。（所以不能轻易删除测试向量）</p>
<p>3.解决办法：（新方法）为了在不降低检测率的前提下减少测试向量的数量，我们提出了一种经验测试向量约简方法。</p>
<p>4.实验过程：（扫描—&gt;分析—&gt;筛选创建）我们抽样了50,000台随机主机，它们在端口443上响应。然后，我们使用上述25条格式错误的记录以及所有支持的密码套件和TLS版本组合对这些主机执行完全扫描。然后，我们可以分析我们的测试向量组合，并创建检测所有填充Oracle漏洞的最小测试向量集。这些经验步骤确保了（上述实验和方法的优点）：</p>
<p>  1)我们不会遗漏漏洞的概率很高</p>
<p>  2)我们可以使用约简集进行大规模分析。</p>
<h2 id="群集漏洞"><a href="#群集漏洞" class="headerlink" title="群集漏洞"></a>群集漏洞</h2><p>一旦我们减少了测试向量的数量，我们就可以执行完全扫描。为此，我们使用Internet顶级列表之一，该列表通常包含最新服务器实现的良好混合。在互联网顶级列表中，Alexa Top 100万数据集包含响应TLS连接的主机数量最多(约75%)，建议用于TLS扫描[36]。</p>
<p>在使用精简向量集执行TLS扫描后，我们创建了易受攻击主机的列表。我们使用完整的测试载体列表重新扫描这些主机。其中：对于每台主机，我们都存储其响应映射。响应图描述了响应我们的测试向量时的完整主机行为。响应映射由密码套件指纹组成。密码套件指纹描述特定密码套件和TLS版本的服务器响应行为。</p>
<p>我们的主要目标之一是通知易受攻击的供应商。为此，有必要使用生成的响应映射对易受攻击的主机进行分组，并联系其管理员以找出易受攻击的实施版本。Böck等人手动执行此步骤，并能够与最重要的供应商接洽[9]。然而，这样的方法费时费力且容易出错。我们的目标是自动对易受攻击的实现进行分组。</p>
<p>尽管在给定所有响应映射的情况下，对易受攻击的主机进行分组似乎很容易，但即使它们使用相同的易受攻击的实现版本，响应映射也会有所不同。运行相同实现的TLS服务器可以使用不同的配置，从而启用不同的密码套件和TLS版本。例如，服务器A可能容易受到填充Oracle的攻击，并且只启用了一个TLS密码套件：TLS_RSA_WITH_AES_128_CBC_SHA256。服务器B使用相同的密码套件指纹易受攻击。但是，服务器B也被配置为使用不容易受到攻击的附加密码套件。这两台服务器使用的是相同的实现还是相似的实现？为了估计这一点，我们设计了一种基于二维力有向图绘制算法的新方法[21]。这些算法在平面上嵌入一个节点网络，允许在空间上解释该网络。他们通过创建一个包含尽可能少的交叉边的二维图来实现这一点。在我们的方法中，我们使用ForceAtlas2算法[21]：ForceAtlas2模拟物理系统以使网络空间化。节点像带电粒子一样相互重复脉冲，而边缘则像弹簧一样吸引它们的节点。这些力量创造了一种汇聚到平衡状态的运动。这一最终配置预计将有助于对数据的解释[21]。</p>
<p>我们将扫描结果表示为如下：图中的每个节点代表一台主机。如果每对主机的响应映射不包括同一密码套件的不同密码套件指纹，则每对主机由一条边连接。</p>
<p>这种方法在我们的数据集上运行良好，表现出类似漏洞的服务器被紧密地分组在一起。我们通过根据节点的度(即它们的边数)给节点着色来扩充图。由此产生的可视化行为允许识别类似的实现。我们在第八节（Finding）给出了具体的结果。</p>
<h1 id="五、大规模TLS扫描"><a href="#五、大规模TLS扫描" class="headerlink" title="五、大规模TLS扫描"></a>五、大规模TLS扫描</h1><p>我们使用TLS- Attacker [37]开发了Padding Oracle测试向量，TLS- Attacker [37]是对TLS实现进行系统分析的框架。 TLS-Attacker支持创建恶意TLS工作流和消息格式错误。TLS-Attacker之前的局限：TLS-Attacker已被用于检测Padding Oracle攻击，但仅针对实验室条件下的特定实现，而不是大规模的。我们创建优化的测试向量集的方法以前未包含在此框架中。</p>
<h2 id="TLS搜寻器"><a href="#TLS搜寻器" class="headerlink" title="TLS搜寻器"></a>TLS搜寻器</h2><p>为了扫描大量的主机，我们开发了一个并行扫描多台服务器并将扫描结果写入数据库的框架。这允许我们通过使用多台机器来并行扫描。该数据库提供了扫描数据的查询接口，这使得对大型结果数据集的分析变得更容易。我们称我们的框架为TLS-Crawler。</p>
<p>TLS-Crawler分为一个控制器实例（Director实例）和可能的多个工作实例（Worker实例）。</p>
<ol>
<li><p>工作实例（Worker实例）：Worker实例逐个执行实际的TLS主机扫描。每个Worker实例都实现了一个线程池，该池跨可用线程分配扫描工作。然后，该实例将结果捆绑在一起，并协调并行化的数据库访问。</p>
</li>
<li><p>控制器实例（Director实例）：控制器实例协调工作实例。Director实例包含一个协调提供程序，负责协调和分配工作人员之间的扫描任务。使用持久性提供程序将结果持久保存在数据库中。我们使用MongoDB作为持久化提供者，并通过Redis队列编排实例。</p>
</li>
</ol>
<p>图2可视化了TLS-Crawler架构。</p>
<p><img src="/images/USS-2020-paper/Figure-2.jpg" alt="Figure-2：我们的TLS扫描基础设施基于用于数据持久性的成熟组件和用于执行TLS评估的TLS-Attacker。"></p>
<h2 id="执行TLS扫描"><a href="#执行TLS扫描" class="headerlink" title="执行TLS扫描"></a>执行TLS扫描</h2><p>在使用测试向量扫描每台主机之前，我们会执行简短扫描，以了解主机支持的CBC密码套件和TLS协议版本。我们将导出和匿名密码套件排除在这些测试之外，因为它们已经被MITM（中间人攻击）攻击者轻易破解。然后，我们使用针对每个CBC密码套件及其支持的协议版本的一组测试向量来执行扫描。</p>
<p>以前的大规模TLS扫描主要集中在TLS握手中的漏洞[9，2]、证书[19]，或者在TLS握手成功之前可能触发的漏洞[17]。这些以前的扫描只需要成功握手一次，通常使用通常支持的密码套件。相反，为了测试Padding Oracle漏洞，有必要对每个测试的密码套件执行完整的TLS握手。这一点由于TLS实现表现出容忍[7]而变得复杂，这可能会阻止服务器完成TLS握手，甚至不能响应初始的ClientHello消息。我们试图将这些容忍度对扫描的影响降到最低，但20%的服务器表现出足够的容忍度，以至于我们无法有效地扫描它们。</p>
<p>即使完成了TLS握手，也不能保证我们可以有效地扫描主机。例如，在某些测试中，目标主机会暂时停止响应几秒钟。这很可能是因为作为拒绝服务防御的一部分，服务器崩溃或阻止了我们的请求。为了避免此类扫描的漏报，我们并行扫描多台主机(最多2000台)，这样就不会有主机被我们的请求超载。此外，我们在扫描具有两个密码套件/版本对的主机之间至少等待10秒，进一步限制了扫描的主机上的负载。</p>
<p>执行这些扫描时，选择适当的超时非常重要。如果超时时间太短，我们可能会因为服务器负载过高而错过响应。相反，较高的超时值会降低扫描性能。设置较高的超时值还意味着我们不再区分立即关闭连接的服务器和需要明显时间来恢复和关闭连接的服务器。此外，服务器的答案可能跨越多个TCP数据包，因此没有简单的方法来确定扫描仪在任何时间点都收到了服务器的完整答案。(某些响应不包括TCP RST或FIN数据包。)。我们根据经验确定，一秒的超时在实践中效果很好，并且在很大程度上保证了服务器确实有足够的时间来处理我们的记录和响应。然而，即使在使用此超时值时，我们也发现服务器由于高负载或各种错误而做出不确定的响应。</p>
<p>为了解决不确定性响应，我们重新扫描了每个可疑漏洞，以避免误报。只有当一台服务器在三次单独的扫描中对我们的每个测试向量做出相同的响应时，我们才认为它是易受攻击的。</p>
<h1 id="六、评估"><a href="#六、评估" class="headerlink" title="六、评估"></a>六、评估</h1><p>对于扫描，我们使用了一台具有2个Xeon E5-2683v5 CPU（总共64个内核）和48 GB RAM的计算机。 扫描平均使用5Mbit / s的上游数据和15Mbit / s的下游数据。</p>
<h2 id="对所有格式错误的记录进行预扫描"><a href="#对所有格式错误的记录进行预扫描" class="headerlink" title="对所有格式错误的记录进行预扫描"></a>对所有格式错误的记录进行预扫描</h2><p>我们对50,000台随机TLS主机执行了初步扫描，旨在减少格式错误的记录集。扫描发生在2018年10月，需要三天时间。结果证实，密钥交换算法和协议版本的选择确实会影响给定主机是否存在CBC Padding Oracle漏洞。然后，我们减少了这组畸形记录。为此，我们首先确定了所有易受攻击的主机，即在扫描全部格式错误的记录时将被识别的主机。然后，我们检查了大小不断增加的错误记录的子集，并针对每个子集检查了仅使用该错误记录子集扫描时可以识别的主机数量。当四条错误记录的子集识别出所有易受攻击的主机时，此过程停止。也就是说，当使用完整的格式错误记录集扫描时，将标识的所有主机也将在使用减少的格式错误记录集扫描时被标识。此缩减集合包括以下格式错误的记录(所有这些记录的长度均为80字节)：</p>
<ol>
<li><p>缺少MAC和正确填充的记录(值为0x4F)。</p>
</li>
<li><p>缺少MAC且填充错误的记录(值为0xFF)。</p>
</li>
<li><p>无申请数据、填充无效、MAC有效的空记录。翻转第一填充字节中的最高位。</p>
</li>
<li><p>没有应用数据的空记录，填充有效，MAC无效。第一个MAC字节中的最低位被翻转。</p>
</li>
</ol>
<p>请注意，我们仍然使用所有支持的密码套件和TLS协议版本测试每台TLS主机。</p>
<ul>
<li><strong>格式错误的记录集缩减是否有损？</strong>缩小的格式错误记录集在初步扫描的样本数据上检测由较大的原始格式错误记录集检测到的所有漏洞。自然会询问是否存在易受原始集合中的错误记录攻击的主机，但不存在易受精简集合中的错误记录攻击的主机。在样本数据中显然没有这样的主机，但是在样本之外可能有这样的主机。如果Internet上有大量这样的主机，则错误记录减少过程将是有损失的，也就是说，通过使用较少的错误记录，我们在完整扫描中检测到的漏洞较少。正如我们现在解释的那样，这种扫描不精确度的来源可能足够小，不会对我们的结果产生实质性影响。换句话说，减少的格式错误记录集可能会检测到由整个格式错误记录集触发的大多数漏洞，而不仅仅是样本数据。</li>
</ul>
<p>实际上，让p表示在所有讲TLS的主机中，易受来自全部错误记录集合中的一个错误记录的影响的主机的百分比，而不是易受来自精简集合的任何错误记录的影响的百分比。也就是说，p描述了缩减遗漏的主机百分比；我们现在将显示它相当小。在用于初步扫描的N=50000台主机的随机样本中，我们没有遇到任何此类主机。<br>为了计算99%的置信区间，我们需要(1−p)^N=0.01.。求解p，我们得到p=0.0092%。因此，我们以99%的把握确定，由于错误记录减少，我们的扫描最多会遗漏0.0092%的其他易受攻击的主机。</p>
<p>为了方便读者，我们对以上内容进行了直观的解释。根据上面的计算，我们估计由于使用减少的格式错误记录集进行扫描而漏掉的Internet上易受攻击主机的百分比为0.0092%。Censys[16]估计，截至2019年2月，大约有4240万台主机在端口443上为TLS提供服务。因此，我们估计减少最多会丢失42400000台·0.0092%=3,900台主机。直观地讲，“99%可信区间”这个术语的意思是这个估计错误的可能性大约是1%，即互联网上有超过3900个这样的主机。</p>
<h2 id="Alexa-Top-100万扫描"><a href="#Alexa-Top-100万扫描" class="headerlink" title="Alexa Top 100万扫描"></a>Alexa Top 100万扫描</h2><p>我们使用减少的畸形记录集扫描Alexa TOP百万网站。在排名靠前的列表中，Alexa Top 100万提供支持TLS的主机百分比最高[36]，因此适合大规模TLS扫描。该列表可能包括大多数备受瞩目的TLS实现。</p>
<p>扫描大约需要72小时。在最初的100万台主机中，785,295台主机在端口443上响应。我们能够使用CBC密码套件与627,493台主机进行TLS握手。我们将所有其他东道主排除在评估之外。我们发现总共有18,257台Alexa Top Million主机(1.83%)容易受到Padding Oracle攻击。</p>
<p>这些数据支持我们的猜想，即在具有一个协议版本的密码套件上实现可能易受攻击，而在具有不同协议版本的同一密码套件上不受攻击。共有649台服务器仅在TLS 1.0或TLS 1.1/1.2中易受攻击，尽管其他版本支持易受攻击的密码套件。同样，在某些情况下，协商的密钥交换算法会影响实现是否显示CBC漏洞。601主机在一个密码套件上易受攻击，但在使用不同密钥交换算法但使用相同对称密码和HMAC函数的另一个密码套件上不受攻击。共有3247台主机在它们支持的所有CBC密码套件上易受攻击。</p>
<p>识别出易受攻击的主机后，我们使用全套测试向量重新扫描它们，以获得它们的完整响应图。如上所述，要将主机标记为易受攻击的主机，我们要求响应映射在三次不同扫描中保持一致。</p>
<h2 id="我们聚类方法的结果"><a href="#我们聚类方法的结果" class="headerlink" title="我们聚类方法的结果"></a>我们聚类方法的结果</h2><p>手动分析每台易受攻击的主机是不可行的。因此，我们将易受攻击的主机聚集在一起，以便显示相同密码套件指纹的主机聚集在一起。这最大限度地减少了确定对每个易受攻击的行为负责的供应商(或多个供应商)所需的手动工作。我们重申，正如第4.3节所解释的那样，这种集群不是微不足道的。</p>
<p>我们识别了93个不同的密码套件指纹。表2总结了40种最常见的密码套件指纹。<br>以第一行为例，7297台主机以BAD_RECORD_MAC和CLOSE_NOTIFY TLS警报响应，并使格式错误的记录11和12的连接超时。对于所有其他格式错误的记录，这些主机关闭了TCP连接。在发送相同的TLS警报之后。</p>
<p>我们还确定了四组表现出与OpenSSL[37]中的CVE-2016-2107漏洞类似的行为(表2中的密码套件指纹#41、#75、#14和#54)。它们以RECORD_OVERFLOW TLS警报响应格式错误的记录6和7(参见表1)。对于所有其他格式错误的记录，它们以BAD_RECORD_MAC响应。这些可能是未打补丁的OpenSSL实现，或者是运行较旧OpenSSL版本的安全设备。</p>
<p><img src="/images/USS-2020-paper/Table-2.jpg" alt="Table-2"></p>
<p><img src="/images/USS-2020-paper/Table-2-exp.jpg" alt="Table-2中的符号解释"></p>
<p>对于同一主机上易受攻击的密码套件，密码套件指纹基本一致。在表现出至少一个易受攻击的密码套件的主机中，99.6%的主机在所有易受攻击的密码套件上具有相同的密码套件指纹。我们删除了剩余0.4%的主机以简化群集。然而，在易受攻击的密码套件上共享相同密码套件指纹的主机不一定共享相同的实现。例如，假设两台主机A和B都有两个受主机1和2支持的密码套件。A在具有密码套件指纹X的密码套件1上易受攻击，但在密码套件2上不易受攻击。B在密码套件1上不易受攻击，但在具有相同密码套件指纹X的密码套件2上易受攻击。这种差异表明主机不共享相同的实现，因为我们期望共享实现具有一致的易受攻击的密码套件集。(我们承认，尽管共享相同的实现，但由于配置标志不同，主机可能表现出不同的行为，但我们认为这不太可能)。</p>
<p>我们将上述情况(在其一般形式中)表示为“矛盾响应图”；两个主机在易受攻击的密码套件上表现出相同的密码套件指纹，但是存在两个主机都支持的密码套件，使得一台主机在该密码套件上易受攻击，而另一台主机则不受攻击。我们将补充性情况称为“兼容响应图”。</p>
<p>然后，我们使用图算法进一步拆分主机组。对于具有相同密码套件指纹的每组主机，我们构造一个图，其中每个节点代表一个主机。当且仅当两台主机的响应图兼容时，我们才会在这两台主机之间画一条边。然后，我们使用Gephi软件中实现的ForceAtlas2算法将图形嵌入到二维平面中。ForceAtlas2算法将通过边连接的节点聚集在一起，因此具有兼容响应图的节点被聚集在一起。行为相同的配置相同的服务器将连接到相同的节点，因此将具有相同的等级。由于这些服务器连接到相同的节点，ForceAtlas2将使它们彼此靠近。通过根据节点的度数对节点进行着色，可以很容易地在图中手动发现配置相似且行为相同的实现。然后，可以检查这些子组是否有候选对象，以便进行手动分析和负责任的披露。</p>
<ul>
<li><strong>一个漏洞组的示例：</strong>图3提供了这种可视化的一个示例。该图清楚地显示了两个不同的子组，它们不共享边缘(这意味着它们的响应图是相互矛盾的，它们可能不共享相同的实现)。绿色显示的主机在TLS_RSA_WITH_AES_128_CBC_SHA和TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA上易受攻击，而粉色显示的服务器仅易受TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA的攻击，而在TLS_RSA_WITH_AES_128_CBC_SHA上不易受攻击。有趣的是，图形中间的主机(大部分为青色)不支持TLS_RSA_WITH_AES_128_CBC_SHA(它们在TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA上易受攻击)。他们可以与绿色或粉色组共享其实现，因此与这两个组的成员共享边缘。红色的主机与粉色的主机非常相似，但与蓝色的主机没有相同的边缘。这意味着要么存在第三组，要么青色组实际上属于绿色组，而红色组属于粉红色组。单个节点很可能是较大组的实现之一的罕见配置。我们进行了DNS查询，确定这两个组都是由捷克一家托管公司运营的。通过这种方式，我们还可以联系每个组中的其他知名网站，询问他们使用的是什么TLS实现。</li>
</ul>
<p><img src="/images/USS-2020-paper/Figure-3.jpg" alt="Figure-3：表2中的组#23的可视化。"></p>
<ul>
<li><strong>响应图的细分：</strong>图4直观地显示了各种密码套件指纹的流行情况。大多数易受攻击的主机都是由几个非常常见的漏洞造成的。Amazon/OpenSSL和Citrix中新发现的漏洞占所有易受攻击主机的一半多一点。它们被列为#15和#84，并在第8.2节中进行了更详细的描述。此外，响应图#41和#75可能源自基于未打补丁的OpenSSL版本的实现，约占易受攻击主机的三分之一。在上述Czech托管公司中可以找到响应图#23。</li>
</ul>
<p><img src="/images/USS-2020-paper/Figure-4.jpg" alt="Figure-4：密码套件指纹流行程度的可视化。大多数易受攻击的主机都是由少数几个普遍存在的漏洞造成的。在上述密码套件指纹中，#84和#15是可利用的。在第8.2节中对它们进行了更详细的描述。"></p>
<h1 id="七、现实可利用的-Padding-Oracle漏洞"><a href="#七、现实可利用的-Padding-Oracle漏洞" class="headerlink" title="七、现实可利用的 Padding Oracle漏洞"></a>七、现实可利用的 Padding Oracle漏洞</h1><p>并非所有我们确定的Oracle都能启用有效的解密攻击。 本节的其余部分将更详细地说明开发。 我们发现的Padding Oracle基于直接消息侧信道，即基于TLS实现，其中两个错误状态触发来自TLS服务器的不同错误响应。 它们可以在BEAST攻击者模型中被利用，BEAST攻击者模型基于两个假设：（a）受害者客户端在攻击者的控制下访问网站，该网站触发对受害者服务器的HTTPS请求，并且（b）攻击者是MitM，并且可以 观察会话并修改传输的密文。 除了这些标准假设外，如果一个球满足两个附加要求：（R1）可观察性和（R2）完美的填充区分性。</p>
<p><img src="/images/USS-2020-paper/Figure-5.jpg" alt="Figure-5：在BEAST场景中利用可观察到的基于错误的Padding Oracle。发送的TLS警报数量不同导致密文总长度不同。"></p>
<h2 id="（R1）可观察性"><a href="#（R1）可观察性" class="headerlink" title="（R1）可观察性"></a>（R1）可观察性</h2><p>与计时侧信道不同，在TLS的情况下，很少关注直接消息侧信道，而且通常的智慧似乎假设攻击者看不到它们。实际上，对于在所有错误情况下都发送单个警报的实现来说，情况确实如此，行为是相同的，可能只是警报消息的内容不同。因为警报消息是加密的，所以攻击者无法利用此类行为来创建旁路。然而，我们确定了许多实现确实在行为上表现出明显差异的情况。这些可观察到的差异大致可以分为两类：</p>
<ul>
<li><strong>TCP层：</strong>我们发现TCP层中的实现泄露了有关填充有效性的信息。例如，在Amazon的例子中，大多数带有无效填充的测试向量都会导致服务器立即关闭TCP连接。但是，精心设计的特定测试向量导致服务器在保持TCP连接打开的同时中止TLS会话。</li>
<li><strong>TLS记录数：</strong>我们观察到TLS服务器根据填充有效性使用不同数量的记录进行响应。虽然攻击者无法解密这些记录，但他能够观察到密文的总长度。例如，在有效填充的情况下，来自组23(参见表2)的服务器以一个TLS警报响应，而对于无效的填充，它们以两个TLS警报响应。</li>
</ul>
<p>假设攻击者A可以根据最后一个填充字节的有效性区分VALID_PADDING和INVALID_PADDING两种情况(参见图6)。攻击者按如下方式解密HTTPS会话Cookie：</p>
<ol>
<li>A引诱受害者客户端加载他控制的网页。此网页包含向受攻击服务器发送HTTPS请求的JavaScript代码，带有A选择的URL。</li>
<li>A观察第一次TLS握手，并确定协商的密码套件是否易受填充预言攻击。<br>如果没有，他就放弃。</li>
<li>如果使用了易受攻击的密码套件，则A指示客户端发送另一个HTTPS请求，修改URL，使得会话cookie的第一个字符是密码块Ci中的最后一个字节。</li>
<li>作为MITM，A截取密文(C1，…，Ci，…，Cn)并对其进行修改，使得Ci成为最后的密文块，例如通过用Ci替换Cn。</li>
<li>最后一个块的解密是伪随机变换，因此填充可能是无效的，从而触发可观察到的INVALID_PADDING错误事件。</li>
<li>在256个请求中，约有1个请求的填充将随机有效。当填充有效时，它最有可能是一个字节的长度，如图6所示。前面的字节将被TLS服务器解析为MAC数据，并且将以压倒性的概率无效。在本例中，A观察到VALID_PADDING错误事件，并将HTTPS会话Cookie的第一个字符计算为C(n−1)[−1]⊕C(i−1)[−1]，其中[−1]运算符表示获取块的最后一个字节。</li>
<li>然后，A准备另一个HTTPS URL，其中会话cookie的第二个字符被移位到Ci的最后一个字节，并且再次从步骤3开始。</li>
</ol>
<p><img src="/images/USS-2020-paper/Figure-6.jpg" alt="Figure-6：我们的攻击依赖于一个易受攻击的服务器，该服务器根据最后一个填充字节的有效性提供不同的响应。"></p>
<h2 id="（R2）完美填充区分性"><a href="#（R2）完美填充区分性" class="headerlink" title="（R2）完美填充区分性"></a>（R2）完美填充区分性</h2><p>在上面的示例中，我们考虑了一个简单的Oracle，它允许根据最后一个填充字节的有效性区分VALIDATE_PADDING和INVALID_PADDING。然而，即使在提供不同的响应时，实现也不一定公开这样简单的Oracle。例如，较早的OpenSSL版本仅在包含至少两个完整有效填充块的空记录的特定情况下才以不同的警报消息响应[37]。我们发现了仅对包含几个有效填充或MAC字节的密文作出不同响应的易受攻击的实现。这样的漏洞不太可能被利用，因为使用上面的算法，攻击者需要执行256个以上的Oracle查询才能解密每个字节。攻击者可以通过在Cookie值后面直接插入他选择的字节来克服此限制。由于CBC的延展性，只能插入一个连续选择的数据块。因此，如果选择的填充字节数小于块大小，则CBC允许创建实际利用漏洞。</p>
<p>因此，在我们的影响评估中，我们采取了保守的方式。要将易受攻击的实现视为可利用的，我们要求它以VALID_PADDING响应最多具有一块有效填充的密文。我们称这样的Oracle为<em>strong</em>称其他Oracle为<em>weak</em>。除了这两个Oracle之外，我们还考虑不正确验证完整的CBC填充而只验证MAC的Oracle。我们称这样的Oracle为POODLE Oracle。这些Oracle也可以通过应用类似POODLE的攻击来攻击。</p>
<p>表2中的列R2标识了Oracle强度。例如，具有第二流行的密码套件指纹(#41)的服务器使用RECORD_OVERFLOW响应表1中格式错误的记录#6和#7。在所有其他情况下，服务器发送BAD_RECORD_MAC警报。我们认为该组是薄弱的，因为攻击者需要发送一个以上的有效填充块来触发具有错误记录#6或#7的RECORD_OVERFLOW警报。</p>
<p>我们认为具有密码套件指纹#2的服务器是<em>strong</em> Oracle。此组中的服务器以TCP连接重置响应。如果他们接收到具有有效填充的格式错误的记录(参见格式错误的记录#20和#21)。还有几个群体的行为类似于POODLE。这些组忽略MAC字节中的修改，并以不同方式响应格式错误的记录#8、#9、#17和#18。</p>
<h2 id="可利用性"><a href="#可利用性" class="headerlink" title="可利用性"></a>可利用性</h2><p>我们认为看得见的POODLE和看得见的<em>strong</em> Oracle是可以开发的。我们认为所有其他的Oracle都是不可利用的。但是，请注意，可以使用更高级的技术来利用<em>weak</em> Oracle。因此，我们对可利用主机数量的估计是保守的较低估计。</p>
<ul>
<li><strong>可利用主机的估计：</strong>我们的扫描发现18,257台主机易受Padding Oracle攻击。其中，11225条(61.4%)表现出可观察到的漏洞，使得攻击者能够区分两条格式错误的记录。另请参见表2中的列R1。至少有10,688台主机提供了<em>strong</em>或POODLE样式的Oracle，占易受攻击主机的58%。另请参见表2中的列R2。总共有10,501台主机实际上是可利用的，即它们同时满足这两个要求。</li>
<li>CBC密码套件协商好了吗？大多数现代浏览器都支持AEAD密码套件。如果易受攻击的服务器偏爱AEAD密码套件，则它们可能会被协商，从而阻止CBC攻击。31651台主机(4.03%)仅支持RC4或CBC密码套件。由于[30]的原因，大多数现代浏览器都禁用了对RC4密码套件的支持，因此现代浏览器可能会与这些主机协商CBC密码套件。在这些主机中，有1400台容易受到Padding Oracle攻击。</li>
</ul>
<h1 id="八、发现"><a href="#八、发现" class="headerlink" title="八、发现"></a>八、发现</h1><p>在本节中，我们将回顾我们的假设，并介绍我们在不同实现中发现的值得注意的漏洞。</p>
<h2 id="我们最初的假设成立吗？"><a href="#我们最初的假设成立吗？" class="headerlink" title="我们最初的假设成立吗？"></a>我们最初的假设成立吗？</h2><p>我们执行扫描的前提是，为了检测易受攻击的主机，必须使用不同的密码套件和协议版本进行扫描。如下所述，我们的发现证实了这一假设。</p>
<ul>
<li><p><strong>是否有必要使用不同的协议版本进行扫描？</strong>Böck等人发现一些服务器仅在其支持的某些协议版本上表现出RSA Padding Oracle漏洞[9]。如第3.5节所述，我们怀疑CBC Padding漏洞也是如此。我们的发现证实了这一假设：我们发现至少有744台主机在TLS 1.0和1.2中都支持相同的密码套件，但仅在其中一个版本中使用该密码套件时易受攻击。在某些情况下，易受攻击的协议版本是较新的版本，而在其他情况下，则是较旧的版本。作为前一种情况的示例，vine.co在使用TLS 1.2和TLS_RSA_WITH_3DES_EDE_CBC_SHA密码套件时容易受到攻击，但在TLS 1.0中使用相同的密码套件时不会受到攻击。</p>
<p>令人惊讶的是，当只有一个协议版本使用相同的密码套件易受攻击时，新版本易受攻击的情况会更多。在这744台主机中，120台主机在TLS 1.0中易受攻击，但在TLS 1.2中不易受攻击；624台主机在TLS 1.2中易受攻击，但在TLS 1.0中不易受攻击。</p>
</li>
<li><p><strong>有必要使用不同的密码套件进行扫描吗？</strong>Böck等人还发现，为了检测出尽可能多的漏洞，有必要使用不同的密码套件进行扫描[9]。在上面的工作中，即使在使用不同的对称密码扫描密码套件时，这一发现仍然成立，而漏洞存在于(理论上无关的)RSA实现中。</p>
<p>我们在我们的结果中发现了类似的行为。我们发现至少601台主机具有两个密码套件，一个是易受攻击的，一个是安全的，两个密码套件之间唯一的区别是密钥交换算法。这一发现是不直观的，因为人们会认为一个实现在使用相同对称密码的所有密码套件上都是统一易受攻击或安全的。举个例子，当将TLS_RSA_WITH_AES_256_CBC_SHA256与TLS 1.2一起使用时，一个网站是安全的，但当将TLS_DHE_RSA_WITH_AES_256_CBC_SHA256与TLS 1.2一起使用时，网站容易受到攻击。</p>
</li>
<li><p><strong>服务器行为背后的基本原理：</strong>这两种行为看起来都不直观，但实际上都是意料之中的。许多实现采用完全不同的代码路径，具体取决于协商的密码套件或协议版本。例如，这些代码路径可能依赖于硬件加速，或者在可能的情况下使用优化的程序集实现。因此，即使使用相同的对称密码，也很可能(如我们所见，这很常见)发现仅在某些受支持的密码套件和协议版本中显示漏洞的实现。</p>
</li>
</ul>
<h2 id="值得注意的漏洞"><a href="#值得注意的漏洞" class="headerlink" title="值得注意的漏洞"></a>值得注意的漏洞</h2><p>在我们的扫描中，我们识别了来自Cisco的多个设备、两个不同的IBM服务器以及来自SonicWall和Oracle的多个设备。在下面，我们将描述我们在Citrix、OpenSSL和IBM服务器中发现并负责任地披露的特定漏洞。我们的披露仍在进行中。在<a href="https://github.com/RUB-NDS/TLS-Padding-Oracles">https://github.com/RUB-NDS/TLS-Padding-Oracles</a> 上总结了我们的最新发现和受影响供应商实施的对策的现状。</p>
<ul>
<li><p><strong>Amazon/OpenSSL：</strong>在Amazon安全团队的帮助下，我们发现了一个漏洞(密码套件指纹#15)，该漏洞主要存在于Amazon服务器和Amazon网络服务(Amazon Web Services，AWS)上。受此漏洞影响的主机会立即使用BAD_RECORD_MAC和CLOSE_NOTIFY警报响应大多数记录，然后关闭连接。但是，如果主机遇到具有有效填充和MAC的零长度记录，则无论MAC的有效性如何，它们都不会立即关闭TCP连接。相反，它们在发送CLOSE_NOTIFY警报后使连接保持活动状态超过4秒。这种行为差异在网络上很容易观察到。请注意，触发此超时不需要MAC值正确，只需创建导致解密数据长度为零的有效填充即可。因此，我们把它归类为一个<em>strong</em> Oracle，也是可以利用的。</p>
<p>进一步调查发现，Amazon服务器正在运行一个使用OpenSSL 1.0.2 API的实现。在某些情况下，根据发生的是MAC错误还是填充错误，对API的函数调用会返回不同的错误代码。然后，Amazon应用程序根据这些错误代码采用不同的代码路径，不同的路径会在TCP层产生明显的差异。仅当未使用AES-NI时，才会出现易受攻击的行为。</p>
<p>事实上，我们之前已经在实验室环境中手动测试了易受攻击的OpenSSL代码，但没有发现此漏洞。这是因为该漏洞仅在特定条件的组合下表现出来：OpenSSL和外部代码之间的微妙交互，并且仅在不使用AES-NI的情况下才会出现，这在当今是很少见的。我们认为这是一个例证，说明了大规模扫描在检测实验室测试有时可能会遗漏的漏洞方面的用处。</p>
<p>我们怀疑此OpenSSL行为是我们发现的许多类似漏洞的基础，而不仅仅是漏洞#15。因此，我们希望一旦OpenSSL发布修补程序，其他漏洞也会因此得到修复。该漏洞被分配到CVE-2019-1559。</p>
</li>
<li><p><strong>IBM的漏洞：</strong>我们在IBM托管的服务器中发现了多个漏洞。表2中的密码套件指纹#77描述了其中一个漏洞。如果MAC或填充不正确，受影响的服务器会发出BAD_RECORD_MAC警报。如果填充正确且MAC不完整或不存在，服务器将以DECODE_ERROR警报响应。即使记录太短而不能包含MAC，也会发生后一种行为，只要记录包含至少两个密文块，而与使用的MAC算法无关。攻击者只能使用IV发送两个块，这保证没有足够的空间容纳MAC。这为攻击者提供了典型的CBC Padding Oracle。因此，我们认为这是一个<em>strong</em> Oracle。由于警报是加密的，因此我们将此漏洞归类为不可察觉，因此无法利用Oracle。IBM安全团队决定在受影响的服务器上禁用CBC密码套件，只支持AES-GCM。</p>
</li>
<li><p><strong>Citrix：</strong>表2中的密码套件指纹#84标识了描述的漏洞。易受攻击的实现首先检查最后一个填充字节，然后验证MAC。如果MAC无效，服务器将关闭连接。这是通过连接超时或RST来完成的，具体取决于剩余填充字节的有效性。但是，如果MAC有效，服务器会检查其余所有填充字节是否正确。如果它们不是，则服务器以BAD_RECORD_MAC和RST作为响应(如果它们有效，则记录格式良好并被接受)。我们在图7中可视化了这种行为。可以通过类似于POODLE的攻击来利用这种行为。因为Oracle也是可以观察到的，所以我们认为这个群体是可以利用的。我们首先在Amazon Web服务中检测到此漏洞。我们与亚马逊安全团队合作，确定Citrix Application Delivery Controller(ADC)和NetScaler Gateway应对此行为负责。该漏洞被指定为CVE-2019-6485。</p>
</li>
</ul>
<p><img src="/images/USS-2020-paper/Figure-7.jpg" alt="Figure-7：使用密码套件指纹#84的Citrix实施的行为。"></p>
<h1 id="九、相关工作"><a href="#九、相关工作" class="headerlink" title="九、相关工作"></a>九、相关工作</h1><p>现在，我们重点介绍过去的工作，这些工作侧重于对现代Internet上的漏洞进行大规模扫描。对于有关padding oracle攻击的相关工作的调查，我们请读者参考第3节。ZMap [18]是一种能够达到较高扫描速度的网络扫描仪。 Durumeric等人[17]使用ZMap扫描IPv4地址空间以量化Heartbleed漏洞[32]的影响。 Heninger等人[19]扫描TLS和SSH，以查找由于熵不足而产生的弱密钥。Adrian等人[2]引入了Logjam漏洞，并根据攻击者的计算资源，使用Internet范围内的扫描来量化其影响。 Aviram等人[5]引入了DROWN漏洞，并类似地使用了Internet范围内的扫描来量化其影响。 Böck等人[9]像我们在这里一样，对Bleichenbacher的漏洞进行了大规模扫描，同时还观察了诸如TCP连接状态变化之类的侧信道。 Valenta等人[38]扫描了椭圆曲线实施中的已知漏洞，寻找可以启用强大攻击的组合CurveSwap。</p>
<h1 id="十、总结和未来工作"><a href="#十、总结和未来工作" class="headerlink" title="十、总结和未来工作"></a>十、总结和未来工作</h1><p>这项工作表明，现代Internet上仍然存在padding oracle漏洞，并且很可能继续威胁用户的安全。 这些漏洞通常很难被发现：它们可能依赖于细微的侧信道或需要专门设计的输入才能触发。</p>
<p>过去，新的重大TLS攻击对生态系统产生了积极影响。 例如，Adrian等人的工作[2]导致了“enforcement”工作，主要的浏览器改变了行为并拒绝连接到具有弱DH参数的服务器。 安全社区如何更好地帮助服务器操作员检测和补救更细微的漏洞（尤其是CBC oracle和一般的其他类别的漏洞）是一个有趣的开放问题。</p>
<p>在CBC oracle的上下文中，一种解决方案是完全禁止CBC密码套件。 最近，主要的浏览器供应商已经宣布打算删除对旧的1.0和1.1 TLS版本的支持。 这迫使许多服务器操作员升级其实现或更改配置。 确实，浏览器供应商也可以取消对CBC密码套件的支持，再次迫使服务器运营商进行升级。 这些变化并非没有代价。 它们通常需要提前几个月通知，可能需要浏览器供应商之间进行协调，并且显然会为服务器操作者增加工作量。</p>
<p>我们的结果再次证实，大规模扫描使发现以前在实验室测试中未发现的各种安全漏洞变得可行。 我们相信，在执行大规模扫描时，不仅在TLS上下文中，我们的方法引起了广泛关注。 一个未解决的问题是如何确定易受攻击的实现版本及其供应商。 在SSH和IPsec协议中，这些数据通常作为协议中的消息字段进行传输。在TLS中传输此类数据将使披露更容易，但另一方面将导致隐私问题和更容易的指纹识别。</p>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>我们要感谢Dennis Felsch，他在我们的硬件和网络基础设施方面为我们提供了帮助，以及我们的匿名评论者提供了许多有洞察力的意见。此外，我们要感谢Amazon、Citrix和OpenSSL团队的专业回应和对信息披露的帮助。</p>
<p>Nimrod Aviram得到了以色列科技部的奖学金、Check Point信息安全研究所的奖学金以及Yitzhak和Chaya Weinstein信号处理研究所的奖学金。Juraj Somorovsky通过未来信托项目得到欧盟委员会的支持(赠款700542-未来-信托-H2020-DS2015-1)。Robert Merget通过SIWECOS项目得到了德国联邦经济事务和能源部的支持，该项目名为“IT-Sinherheit in der Wirtschaft”(IT-Silherheit in der Wirtschaft)计划。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1] Openssl security advisory. CVE-2018-0733.</span><br><span class="line">[2] ADRIAN, D., BHARGAVAN, K., DURUMERIC, Z., GAUDRY, P., GREEN, M., HALDERMAN, J. A., HENINGER, N., SPRINGALL, D., THOMÉ, E., VALENTA, L., ET AL. Imperfect forward secrecy: How diffie-hellman fails in practice. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (2015), ACM, pp. 5–17.</span><br><span class="line">[3] ALBRECHT, M. R., AND PATERSON, K. G. Lucky microseconds: A timing attack on amazon’s s2n implementation of TLS. In Advances in Cryptology - EUROCRYPT 2016 - 35th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Vienna, Austria, May 8-12, 2016, Proceedings, Part I (2016), pp. 622–643.</span><br><span class="line">[4] ALFARDAN, N. J., AND PATERSON, K. G. Lucky Thirteen: Breaking the TLS and DTLS Record Protocols. 2013 IEEE Symposium on Security and Privacy 0 (2013), 526–540.</span><br><span class="line">http:&#x2F;&#x2F;www.isg.rhul.ac.uk&#x2F;tls&#x2F;TLStiming.pdf.</span><br><span class="line">[5] AVIRAM, N., SCHINZEL, S., SOMOROVSKY, J., HENINGER, N., DANKEL, M., STEUBE, J., VALENTA, L., ADRIAN, D., HALDERMAN, J. A., DUKHOVNI, V., KÄSPER, E., COHNEY, S., ENGELS, S., PAAR, C., AND SHAVITT, Y. DROWN: Breaking TLS Using SSLv2. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, Aug. 2016), pp. 689–706.</span><br><span class="line">[6] BARDOU, R., FOCARDI, R., KAWAMOTO, Y., STEEL, G., AND TSAY, J.-K. Efficient Padding Oracle Attacks on Cryptographic Hardware. In Advances in Cryptology – CRYPTO (2012), Canetti and R. Safavi-Naini, Eds.</span><br><span class="line">[7] BENJAMIN, D. Tls ecosystem woes, Jan. 2018. Real World Crypto Symposium.</span><br><span class="line">[8] BLEICHENBACHER, D.</span><br><span class="line">Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1.</span><br><span class="line">In Advances in Cryptology — CRYPTO ’98, vol. 1462 of Lecture Notes in Computer Science. Springer Berlin &#x2F; Heidelberg, 1998.</span><br><span class="line">[9] BÖCK, H., SOMOROVSKY, J., AND YOUNG, C. Return of bleichenbacher’s oracle threat (ROBOT). In 27th USENIX Security Symposium (USENIX Security 18) (Baltimore, MD, 2018), USENIX Association, pp. 817–849.</span><br><span class="line">[10] BÖCK, H.</span><br><span class="line">A little POODLE left in GnuTLS (old versions), Nov. 2015. https:&#x2F;&#x2F;blog.hboeck.de&#x2F;archives&#x2F; 877-A-little-POODLE-left-in-GnuTLS-old-versions.</span><br><span class="line">html.</span><br><span class="line">[11] CANVEL, B., HILTGEN, A., VAUDENAY, S., AND VUAGNOUX, M. Password Interception in a SSL&#x2F;TLS Channel. In Advances in Cryptology - CRYPTO 2003, vol. 2729 of Lecture Notes in Computer Science. Springer Berlin &#x2F; Heidelberg, Aug. 2003.</span><br><span class="line">[12] DIERKS, T., AND ALLEN, C. The TLS Protocol Version 1.0.</span><br><span class="line">RFC 2246 (Proposed Standard), Jan. 1999. Obsoleted by RFC 4346, updated by RFCs 3546, 5746, 6176, 7465, 7507.</span><br><span class="line">[13] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346 (Proposed Standard), Apr. 2006. Obsoleted by RFC 5246, updated by RFCs 4366, 4680, 4681, 5746, 6176, 7465, 7507.</span><br><span class="line">[14] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008. Updated by RFCs 5746, 5878, 6176, 7465, 7507, 7568, 7627, 7685.</span><br><span class="line">[15] DUONG, T., AND RIZZO, J. Cryptography in the web: The case of cryptographic design flaws in ASP.NET. In IEEE Symposium on Security and Privacy (2011).</span><br><span class="line">[16] DURUMERIC, Z., ADRIAN, D., MIRIAN, A., BAILEY, M., AND HALDERMAN, J. A.</span><br><span class="line">A search engine backed by Internet-wide scanning. In 22nd ACM Conference on Computer and Communications Security (Oct. 2015).</span><br><span class="line">[17] DURUMERIC, Z., LI, F., KASTEN, J., AMANN, J., BEEKMAN, J., PAYER, M., WEAVER, N., ADRIAN, D., PAXSON, V., BAILEY, M., ET AL. The matter of heartbleed. In Proceedings of the 2014 conference on internet measurement conference (2014), ACM, pp. 475–488.</span><br><span class="line">[18] DURUMERIC, Z., WUSTROW, E., AND HALDERMAN, J. A.</span><br><span class="line">Zmap: Fast internet-wide scanning and its security applications.</span><br><span class="line">[19] HENINGER, N., DURUMERIC, Z., WUSTROW, E., AND HALDERMAN, J. A. Mining your ps and qs: Detection of widespread weak keys in network devices.</span><br><span class="line">[20] IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B. Lucky 13 strikes back. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security (New York, NY, USA, 2015), ASIA CCS ’15, ACM, pp. 85–96.</span><br><span class="line">[21] JACOMY, M., VENTURINI, T., HEYMANN, S., AND BASTIAN, M. Forceatlas2, a continuous graph layout algorithm for handy network visualization designed for the gephi software. PLOS ONE 9, 6 (06 2014), 1–12.</span><br><span class="line">[22] JAGER, T., SCHINZEL, S., AND SOMOROVSKY, J. Bleichenbacher’s attack strikes again: breaking PKCS#1 v1.5 in XML Encryption. In Computer Security - ESORICS 2012 - 17th European Symposium on Research in Computer Security, Pisa, Italy, September 10-14, 2012. Proceedings (2012), S. Foresti and M. Yung, Eds., LNCS, Springer.</span><br><span class="line">[23] JAGER, T., AND SOMOROVSKY, J. How To Break XML Encryption. In The 18th ACM Conference on Computer and Communications Security (CCS) (Oct. 2011).</span><br><span class="line">[24] LABS, A. W. S. s2n: An implementation of the tls&#x2F;ssl protocols.</span><br><span class="line">[25] LANGLEY, A.</span><br><span class="line">The POODLE bites again, Nov. 2014.</span><br><span class="line">https:&#x2F;&#x2F;www.imperialviolet.org&#x2F;2014&#x2F;12&#x2F;08&#x2F; poodleagain.html.</span><br><span class="line">[26] MEYER, C., SOMOROVSKY, J., WEISS, E., SCHWENK, J., SCHINZEL, S., AND TEWS, E. Revisiting SSL&#x2F;TLS Implementations: New Bleichenbacher Side Channels and Attacks.</span><br><span class="line">In 23rd USENIX Security Symposium, San Diego, USA (August 2014).</span><br><span class="line">[27] MÖLLER, B., DUONG, T., AND KOTOWICZ, K. This POODLE bites: exploiting the SSL 3.0 fallback, 2014.</span><br><span class="line">[28] PETTERSSEN, Y. The POODLE has friends.</span><br><span class="line">[29] PETTERSSEN, Y. There are more POODLEs in the forest.</span><br><span class="line">[30] POPOV, A. Prohibiting RC4 Cipher Suites. RFC 7465 (Proposed Standard), Feb. 2015.</span><br><span class="line">[31] RESCORLA, E. The Transport Layer Security (TLS) Protocol Version 1.3. RFC 8446, 2018.</span><br><span class="line">[32] RIKU, ANTTI, MATTI, AND MEHTA. Heartbleed, cve-20140160, 2015. http:&#x2F;&#x2F;heartbleed.com&#x2F;.</span><br><span class="line">[33] RIZZO, J., AND DUONG, T.</span><br><span class="line">Practical padding oracle attacks. In Proceedings of the 4th USENIX conference on Offensive technologies (Berkeley, CA, USA, 2010), WOOT’10, USENIX Association, pp. 1–8.</span><br><span class="line">[34] RIZZO, J., AND DUONG, T. Here Come The XOR Ninjas, May 2011.</span><br><span class="line">[35] RONEN, E., PATERSON, K. G., AND SHAMIR, A. Pseudo constant time implementations of tls are only pseudo secure. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (2018), ACM, pp. 1397–1414.</span><br><span class="line">[36] SCHEITLE, Q., HOHLFELD, O., GAMBA, J., JELTEN, J., ZIMMERMANN, T., STROWES, S. D., AND VALLINARODRIGUEZ, N. A Long Way to the Top: Significance, Structure, and Stability of Internet Top Lists. In Internet Measurement Conference (IMC’18), IMC’18 Community Contribution Award (Boston, USA, Nov. 2018), ACM, pp. 478–493.</span><br><span class="line">[37] SOMOROVSKY, J. Systematic fuzzing and testing of tls libraries. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (2016), ACM, pp. 1492–1504.</span><br><span class="line">[38] VALENTA, L., SULLIVAN, N., SANSO, A., AND HENINGER, N. In search of curveswap: Measuring elliptic curve implementations in the wild. In 2018 IEEE European Symposium on Security and Privacy (EuroS&amp;P) (2018), IEEE, pp. 384–398.</span><br><span class="line">[39] VAUDENAY, S. Security Flaws Induced by CBC Padding —Applications to SSL, IPSEC, WTLS... In Advances in Cryptology — EUROCRYPT 2002, vol. 2332 of Lecture Notes in Computer Science. Springer Berlin &#x2F; Heidelberg, Apr. 2002.</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>TLS1.2 RFC-5246文档翻译学习</title>
    <url>/2021/05/20/TLS1-2-RFC-5246%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>官方文档：<a href="https://www.rfc-editor.org/info/rfc5246">RFC-5246</a></p>
<ul>
<li><strong>文章结构请看右边的目录</strong>👉</li>
</ul>
]]></content>
      <tags>
        <tag>RFC6246</tag>
        <tag>TLS1.2</tag>
      </tags>
  </entry>
  <entry>
    <title>「送你一朵小红花」</title>
    <url>/2021/04/26/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/</url>
    <content><![CDATA[<p><img src="https://img0.utuku.china.com/550x0/ent/20200612/8f5ba9c8-3738-4c6f-bc10-9c64c27d1c58.jpg"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC17.JPG" alt="LHC17"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC16.JPG" alt="LHC16"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC15.JPG" alt="LHC15"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC14.JPG" alt="LHC14"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC13.jpg" alt="LHC13"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC12.jpg" alt="LHC12"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC11.jpg" alt="LHC11"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC10.JPG" alt="LHC10"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC9.jpg" alt="LHC9"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC8.jpg" alt="LHC8"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC6.GIF" alt="LHC6"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC5.jpg" alt="LHC5"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC4.JPG" alt="LHC4"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/LHC3.jpg" alt="LHC3"></p>
<p><img src="../images/%E3%80%8C%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1%E3%80%8D/run&start%E6%96%B9%E6%B3%95%E5%8C%BA%E5%88%AB.jpg" alt="run&amp;start方法区别"></p>
]]></content>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建记录</title>
    <url>/2021/04/24/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="问题1-Hexo本地博客预览正常，deploy到github之后无格式显示（空白显示）"><a href="#问题1-Hexo本地博客预览正常，deploy到github之后无格式显示（空白显示）" class="headerlink" title="问题1:Hexo本地博客预览正常，deploy到github之后无格式显示（空白显示）"></a>问题1:Hexo本地博客预览正常，deploy到github之后无格式显示（空白显示）</h1><p>最开始，我使用的是Next主题，在网上找过许多答案，其中一种针对Next主题以前的一个问题所进行的修改：<a href="https://github.com/iissnan/hexo-theme-next/issues/1214">vendors文件修改</a>，但是vendors文件夹问题在随后的Next版本中得到了解决。</p>
<p>如今又出现这样的问题，我根据网上的各种回答进行了许多地方的一个修改，这里做个总结：</p>
<ol>
<li>首先是在本地deploy之前，先执行<strong>hexo clean</strong>，来清除相关缓存，然后hexo g &amp;&amp; hexo d（可以多执行几遍）</li>
<li>在之前搭建github主页时，github默认给我设置的分支是main，看到过网上的一个解决方案是将分支名从main改成master（github权限问题？？？）</li>
<li><strong>清除浏览器的缓存</strong>，在我的实际刷新来看，这个办法应该是最有用的，我用chrome和safari都验证过了。<a href="https://www.cnblogs.com/Chesky/p/chrome_disabling_cache.html">清除Chrome浏览器指定网页缓存</a>，每次加载网站都能重新载入。</li>
<li>Hexo本地网站根目录下面的_config.yml文件配置不对。在deploy设置中branch选项的值应该和你在github项目的分支保持一致。至于配置文件的url设置，个人认为没影响，在我的使用来看，这个url主要是影响网站sitemap.xml文件的生成和有效性。</li>
</ol>
<h1 id="问题2-Hexo博客页面加载缓慢或者卡顿"><a href="#问题2-Hexo博客页面加载缓慢或者卡顿" class="headerlink" title="问题2:Hexo博客页面加载缓慢或者卡顿"></a>问题2:Hexo博客页面加载缓慢或者卡顿</h1><p>现在，我使用的是<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly主题</a>，所做的更改基本都是<a href="https://butterfly.js.org/">Jerry的教程</a>建议的</p>
<ol>
<li><p>最直观的方法就是在加载网页后，F12打开浏览器的开发者模式，选到Console，然后就能看到加载Hexo网页时出现了哪些错误。下图是我第一次打开Console时出现的错误图：</p>
<p><img src="/images/Hexo-blog-build-record/chrome-F12-Console-errors.jpg"></p>
<p>然后就可以根据错误对主题或者站点配置文件进行响应的改动，记得改动之前备份，不然你可能会后悔的</p>
</li>
<li><p>删除一些无关的插件，<a href="https://www.dazhuanlan.com/2019/10/12/5da110cdd9a7b/">卸载 hexo 插件</a></p>
</li>
</ol>
<h1 id="问题3-Hexo和Typora图像存储和设置问题"><a href="#问题3-Hexo和Typora图像存储和设置问题" class="headerlink" title="问题3:Hexo和Typora图像存储和设置问题"></a>问题3:Hexo和Typora图像存储和设置问题</h1><p>已解决-个人觉得很好的一个回答：<a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a></p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol>
<li><a href="https://www.jianshu.com/p/c9d3a53fb8e3">Hexo页面加载性能优化</a></li>
<li><a href="https://link.jianshu.com/?t=http://www.ieclipse.cn/2016/08/29/Web/Hexo-deploy-lines/">Hexo博客双线部署</a></li>
<li><a href="https://gaomf.cn/2015/11/01/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/">Hexo博客优化加载速度</a></li>
<li><a href="https://blog.csdn.net/weixin_44676935/article/details/107440479">Hexo博客因图标失效导致加载过慢（icarus主题）</a></li>
</ol>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>国密算法/协议/工控</title>
    <url>/2021/04/28/%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95-%E5%8D%8F%E8%AE%AE-%E5%B7%A5%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="国密SSL-TLS"><a href="#国密SSL-TLS" class="headerlink" title="国密SSL/TLS"></a>国密SSL/TLS</h1><p>🌟🌟🌟<a href="https://www.gmssl.cn/gmssl/index.jsp?go=down">国密SSL实验室</a>（重点）：好多使用的工具，包括国密Web浏览器、国密Web服务器、国密性能测试、国密工具箱等等。可以从这里面下载Web服务器，搭建并进行TLS-Attacker的测试。一个<a href="https://developer.aliyun.com/article/770830">阿里云的实战博客</a>，该博客实战了GMSSL的Nginx安装和使用。一个相关测试的专栏文章-<a href="https://segmentfault.com/a/1190000024448440">国密SSL之性能测试</a>。</p>
<p>一个在线工具：<a href="https://myssl.com/">SSL/TLS安全评估报告-在线网站检测</a>。其支持国密HTTPS的检测分析。</p>
<p>江南天安<a href="https://github.com/jntass">Github主页-jntass</a>：提供源码下载和Nginx服务器的安装。</p>
<p><a href="http://gmssl.org/">GmSSL</a>：支持国密的密码工具箱，GmSSL作者关志教授的Github主页：<a href="https://github.com/guanzhi">GmSSL-guanzhi</a>。其中关志教授将<a href="https://github.com/guanzhi/GM-Standards">GM-Standards</a>都列了出来，所有国密行业的标准pdf。</p>
<p><a href="https://www.doubleca.com/test_toIndexPage.action">大宝CA数字证书测试平台</a>（工具平台/Java/服务器）：该平台有Java国密算法基本组件（JSE），有Java国密SSL算法基础套件，有国密SSL规范的Tomcat组件，有国密SSL规范Nginx服务器。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="第一次GmSSL环境搭建实验（国密SSL实验室）："><a href="#第一次GmSSL环境搭建实验（国密SSL实验室）：" class="headerlink" title="第一次GmSSL环境搭建实验（国密SSL实验室）："></a>第一次GmSSL环境搭建实验（国密SSL实验室）：</h2><ul>
<li><a href="https://developer.aliyun.com/article/770830">国密SSL协议之Nginx集成</a>：结合前面的<em>国密SSL实验室</em>进行，在CentOS 7环境上实验<del>（失败）</del></li>
</ul>
<ol>
<li>先在国密SSL实验室官网下载国密Web服务器：gmssl_openssl_1.1_b4.tar.gz</li>
<li>在CentOS8虚拟机中，解压文件到/usr/local目录下面，解压后文件为/gmssl</li>
<li>从Nginx官网下载Nginx：nginx-1.18.0.tar.gz，将conf中的OPENSSL位置进行更改（这里改文件出了一点小差错，还好看出来并解决了）</li>
<li>从GMSSL中生成证书，然后开启nginx服务</li>
<li>下载360极速浏览器，访问centos服务器的地址。出错误了，在这里访问CentOS的IP地址并不能成功进行访问。这里能正常访问http但是不能访问https，无论如何都不行，也不知道是不是浏览器的问题。无法解决，换一个环境。</li>
</ol>
<h2 id="第二次GmSSL环境搭建实验（GmSSL-关志教授）："><a href="#第二次GmSSL环境搭建实验（GmSSL-关志教授）：" class="headerlink" title="第二次GmSSL环境搭建实验（GmSSL-关志教授）："></a>第二次GmSSL环境搭建实验（GmSSL-关志教授）：</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/1597165">搭建国密SSL开发测试环境</a>：结合前面的<em><strong>GmSSL-关志教师-Github</strong></em>进行，在CentOS 7环境上进行实验<strong>（成功）</strong></li>
</ul>
<ol>
<li>决定换一个，换成guanzhi的GmSSL环境搭建，试一下有无用，如果在不行，就换成TaSSL的环境。</li>
<li>先安装CentOS 7，接下来安装相关软件，Openssl、Gcc、GmSSL，环境都搭建好了，且都能成功运行测试。</li>
<li>接下来进行server的创建，然后本地连接服务器，进行国密SSL测试</li>
<li>出了一个问题，就是提示libcrypto.so.1.1和libssl.so.1.1文件有问题。这里打算重新安装d版本的openssl试一下是否有错误。这次重装了一次GmSSL之后，就没有出现错误了。</li>
<li>开始打开GmSSL的服务端，试一下国密浏览器是否能连接。</li>
<li>又出现了一个问题，就是主机上并不能访问虚拟机openssl的ip地址，这就很奇怪了，能相互ping通，但是不能在主机浏览器上进行访问，但是能在虚拟机上对本地进行连接。尝试关闭虚拟机的防火墙之后，主机能对虚拟机进行正常访问。</li>
<li>通过在Mac上下载GmBrowser并且访问CentOS服务器的地址，成功进行国密连接。</li>
<li>接下来，使用TLS-Attacker和TLS-Scnner对本地环境进行测试。开始着手TLS-Attacker和TLS-Scanner的熟悉和编程修改优化。</li>
</ol>
<h1 id="第三次GMSSL环境搭建（Double-cA大宝CA）"><a href="#第三次GMSSL环境搭建（Double-cA大宝CA）" class="headerlink" title="第三次GMSSL环境搭建（Double cA大宝CA）"></a>第三次GMSSL环境搭建（Double cA大宝CA）</h1><h2 id="正式实验记录："><a href="#正式实验记录：" class="headerlink" title="正式实验记录："></a>正式实验记录：</h2><ol>
<li><p>先熟悉GmSSL的生成证书以及国密算法组件</p>
<ul>
<li>新增国密密码套件如下，有对应的16进制表示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1 ECDHE-SM1-SM3   0xE001</span><br><span class="line"> 2 ECC-SM1-SM3     0xE003</span><br><span class="line"> 3 IBSDH-SM1-SM3   0xE005</span><br><span class="line"> 4 IBC-SM1-SM3     0xE007</span><br><span class="line"> 5 RSA-SM1-SM3     0xE009</span><br><span class="line"> 6 RSA-SM1-SHA1    0xE00A</span><br><span class="line"> 7 ECDHE-SM4-SM3   0xE011</span><br><span class="line"> 8 ECC-SM4-SM3     0xE013</span><br><span class="line"> 9 IBSDH-SM4-SM3   0xE015</span><br><span class="line">10 IBC-SM4-SM3     0xE017</span><br><span class="line">11 RSA-SM4-SM3     0xE019</span><br><span class="line">12 RSA-SM4-SHA1    0xE01A</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gmssl对国标支持</span><br><span class="line"></span><br><span class="line">gmssl ciphers -V |grep GMTLS</span><br><span class="line">0xE0,0x17 - SM9-WITH-SMS4-SM3 GMTLSv1.1 Kx&#x3D;SM9 Au&#x3D;SM9 Enc&#x3D;SMS4(128) Mac&#x3D;SM3</span><br><span class="line">0xE0,0x15 - SM9DHE-WITH-SMS4-SM3 GMTLSv1.1 Kx&#x3D;SM9DHE Au&#x3D;SM9 Enc&#x3D;SMS4(128) Mac&#x3D;SM3</span><br><span class="line">0xE0,0x13 - SM2-WITH-SMS4-SM3 GMTLSv1.1 Kx&#x3D;SM2 Au&#x3D;SM2 Enc&#x3D;SMS4(128) Mac&#x3D;SM3</span><br><span class="line">0xE0,0x11 - SM2DHE-WITH-SMS4-SM3 GMTLSv1.1 Kx&#x3D;SM2DHE Au&#x3D;SM2 Enc&#x3D;SMS4(128) Mac&#x3D;SM3</span><br><span class="line">0xE0,0x1A - RSA-WITH-SMS4-SHA1 GMTLSv1.1 Kx&#x3D;RSA Au&#x3D;RSA Enc&#x3D;SMS4(128) Mac&#x3D;SHA1</span><br><span class="line">0xE0,0x19 - RSA-WITH-SMS4-SM3 GMTLSv1.1 Kx&#x3D;RSA Au&#x3D;RSA Enc&#x3D;SMS4(128) Mac&#x3D;SM3</span><br></pre></td></tr></table></figure>

<p>GMBroswer链接GM服务器之后网页显示的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s_server -key user.key -cert user_cert.pem -port 44330 -www -debug </span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Ciphers supported in s_server binary</span><br><span class="line">TLSv1.2    :ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2    :ECDHE-RSA-AES256-GCM-SHA384 </span><br><span class="line">TLSv1.2    :DHE-RSA-AES256-GCM-SHA384 TLSv1.2    :ECDHE-ECDSA-CHACHA20-POLY1305 </span><br><span class="line">TLSv1.2    :ECDHE-RSA-CHACHA20-POLY1305 TLSv1.2    :DHE-RSA-CHACHA20-POLY1305 </span><br><span class="line">TLSv1.2    :ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2    :ECDHE-RSA-AES128-GCM-SHA256 </span><br><span class="line">TLSv1.2    :DHE-RSA-AES128-GCM-SHA256 TLSv1.2    :ECDHE-SM2-WITH-SMS4-GCM-SM3 </span><br><span class="line">TLSv1.2    :ECDHE-ECDSA-AES256-SHA384 TLSv1.2    :ECDHE-RSA-AES256-SHA384   </span><br><span class="line">TLSv1.2    :DHE-RSA-AES256-SHA256     TLSv1.2    :ECDHE-ECDSA-AES128-SHA256 </span><br><span class="line">TLSv1.2    :ECDHE-RSA-AES128-SHA256   TLSv1.2    :DHE-RSA-AES128-SHA256     </span><br><span class="line">TLSv1.2    :ECDHE-SM2-WITH-SMS4-SM3   SSLv3      :ECDHE-ECDSA-AES256-SHA    </span><br><span class="line">SSLv3      :ECDHE-RSA-AES256-SHA      SSLv3      :DHE-RSA-AES256-SHA        </span><br><span class="line">SSLv3      :ECDHE-ECDSA-AES128-SHA    SSLv3      :ECDHE-RSA-AES128-SHA      </span><br><span class="line">SSLv3      :DHE-RSA-AES128-SHA        TLSv1.2    :RSA-PSK-AES256-GCM-SHA384 </span><br><span class="line">TLSv1.2    :DHE-PSK-AES256-GCM-SHA384 TLSv1.2    :RSA-PSK-CHACHA20-POLY1305 </span><br><span class="line">TLSv1.2    :DHE-PSK-CHACHA20-POLY1305 TLSv1.2    :ECDHE-PSK-CHACHA20-POLY1305 </span><br><span class="line">TLSv1.2    :AES256-GCM-SHA384         TLSv1.2    :PSK-AES256-GCM-SHA384     </span><br><span class="line">TLSv1.2    :PSK-CHACHA20-POLY1305     TLSv1.2    :RSA-PSK-AES128-GCM-SHA256 </span><br><span class="line">TLSv1.2    :DHE-PSK-AES128-GCM-SHA256 TLSv1.2    :AES128-GCM-SHA256         </span><br><span class="line">TLSv1.2    :PSK-AES128-GCM-SHA256     TLSv1.2    :AES256-SHA256             </span><br><span class="line">TLSv1.2    :AES128-SHA256             TLSv1.0    :ECDHE-PSK-AES256-CBC-SHA384 </span><br><span class="line">SSLv3      :ECDHE-PSK-AES256-CBC-SHA  SSLv3      :SRP-RSA-AES-256-CBC-SHA   </span><br><span class="line">SSLv3      :SRP-AES-256-CBC-SHA       TLSv1.0    :RSA-PSK-AES256-CBC-SHA384 </span><br><span class="line">TLSv1.0    :DHE-PSK-AES256-CBC-SHA384 SSLv3      :RSA-PSK-AES256-CBC-SHA    </span><br><span class="line">SSLv3      :DHE-PSK-AES256-CBC-SHA    SSLv3      :AES256-SHA                </span><br><span class="line">TLSv1.0    :PSK-AES256-CBC-SHA384     SSLv3      :PSK-AES256-CBC-SHA        </span><br><span class="line">TLSv1.0    :ECDHE-PSK-AES128-CBC-SHA256 SSLv3      :ECDHE-PSK-AES128-CBC-SHA  </span><br><span class="line">SSLv3      :SRP-RSA-AES-128-CBC-SHA   SSLv3      :SRP-AES-128-CBC-SHA       </span><br><span class="line">TLSv1.0    :RSA-PSK-AES128-CBC-SHA256 TLSv1.0    :DHE-PSK-AES128-CBC-SHA256 </span><br><span class="line">SSLv3      :RSA-PSK-AES128-CBC-SHA    SSLv3      :DHE-PSK-AES128-CBC-SHA    </span><br><span class="line">TLSv1.0    :ECDHE-PSK-WITH-SMS4-CBC-SM3 GMTLSv1.1  :SM9-WITH-SMS4-SM3         </span><br><span class="line">GMTLSv1.1  :SM9DHE-WITH-SMS4-SM3      GMTLSv1.1  :SM2-WITH-SMS4-SM3         </span><br><span class="line">GMTLSv1.1  :SM2DHE-WITH-SMS4-SM3      SSLv3      :AES128-SHA                </span><br><span class="line">GMTLSv1.1  :RSA-WITH-SMS4-SHA1        GMTLSv1.1  :RSA-WITH-SMS4-SM3         </span><br><span class="line">TLSv1.0    :PSK-AES128-CBC-SHA256     SSLv3      :PSK-AES128-CBC-SHA        </span><br><span class="line">SSLv3      :PSK-WITH-SMS4-CBC-SM3     </span><br><span class="line">---</span><br><span class="line">Ciphers common between both SSL end points:</span><br><span class="line">ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384</span><br><span class="line">ECDHE-RSA-AES256-GCM-SHA384 ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305</span><br><span class="line">ECDHE-RSA-AES128-SHA       ECDHE-RSA-AES256-SHA       ECDHE-SM2-WITH-SMS4-SM3   </span><br><span class="line">AES128-GCM-SHA256          AES256-GCM-SHA384          AES128-SHA                </span><br><span class="line">AES256-SHA</span><br><span class="line">Signature Algorithms: ECDSA+SHA256:0x04+0x08:RSA+SHA256:SM2+SM3:ECDSA+SHA384:0x05+0x08:RSA+SHA384:0x06+0x08:RSA+SHA512:RSA+SHA1</span><br><span class="line">Shared Signature Algorithms: ECDSA+SHA256:RSA+SHA256:SM2+SM3:ECDSA+SHA384:RSA+SHA384:RSA+SHA512:RSA+SHA1</span><br><span class="line">Supported Elliptic Curves: 0x7A7A:X25519:P-256:P-384:SM2</span><br><span class="line">Shared Elliptic curves: X25519:P-256:P-384:SM2</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-SM2-WITH-SMS4-SM3</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-SM2-WITH-SMS4-SM3</span><br><span class="line">    Session-ID: </span><br><span class="line">    Session-ID-ctx: 01000000</span><br><span class="line">    Master-Key: 7C4F28BB5846F9DFE42BFD295E441A8520D50A3FA0E9D6C51C31AA3C153A69C46126ADE3CC77D6074F8127B2C93043A6</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    Start Time: 1620646292</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">   0 items in the session cache</span><br><span class="line">   0 client connects (SSL_connect())</span><br><span class="line">   0 client renegotiates (SSL_connect())</span><br><span class="line">   0 client connects that finished</span><br><span class="line">   1 server accepts (SSL_accept())</span><br><span class="line">   0 server renegotiates (SSL_accept())</span><br><span class="line">   1 server accepts that finished</span><br><span class="line">   0 session cache hits</span><br><span class="line">   1 session cache misses</span><br><span class="line">   0 session cache timeouts</span><br><span class="line">   0 callback cache hits</span><br><span class="line">   0 cache full overflows (128 allowed)</span><br><span class="line">---</span><br><span class="line">no client certificate available</span><br></pre></td></tr></table></figure></li>
<li><p>GmSSL国密证书生成以及单向和双向认证</p>
<p><a href="https://www.cnblogs.com/skills/p/13620478.html">GmSSL开发环境搭建及双证书生成</a>：在生成证书里面是讲的最详细也是最好的一个博客文章（注意博客生成根证书的时候命令有一处错误，Root.key应该改成CA.key）（注意里面的key和crt文件）（如果这里的证书不行，直接去国密SSL实验室进行生成就行，都有）</p>
<ul>
<li>实验结果：</li>
</ul>
<p>单证书单向双向认证都能完成进行，且在GMBroswer也可以连接；双证书的单项认证完成通信，但是双向认证可能还存在问题（源码问题），并不能如愿进行，而且双证书都不能和GMBroswer进行连接。如果需要360安全浏览器进行连接，需要在编译GmSSL修改其中的一个C文件，具体见：<a href="https://blog.csdn.net/qq_15077747/article/details/108602988?spm=1001.2014.3001.5501">gmssl编译后不支持360浏览器双向https问题</a></p>
<ul>
<li>实验记录：</li>
</ul>
<h3 id="单证书单向认证："><a href="#单证书单向认证：" class="headerlink" title="单证书单向认证："></a>单证书单向认证：</h3><p>抓包文件：”1-one-cert-one-auth.pcapng”</p>
<p>首先打开服务器s_server，服务端命令和输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_server -key .&#x2F;sm2.server&#x2F;sm2.server.sig.key.pem -cert .&#x2F;sm2.server&#x2F;sm2.server.sig.crt.pem -CAfile sm2.trust.pem -state -accept 44330</span><br><span class="line">Using default temp DH parameters</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<p>然后s_client进行连接，客户端s_client的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_client -connect localhost:44330 -key .&#x2F;sm2.koper&#x2F;sm2.koper.sig.key.pem -cert .&#x2F;sm2.koper&#x2F;sm2.koper.sig.crt.pem -CAfile sm2.trust.pem -state</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">SSL_connect:before SSL initialization</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server hello</span><br><span class="line">depth&#x3D;2 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; RootCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;1 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; MiddleCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;0 C &#x3D; CN, ST &#x3D; Beijing, L &#x3D; Beijing, O &#x3D; Sec, OU &#x3D; Sec, CN &#x3D; server, emailAddress &#x3D; sec@email.com</span><br><span class="line">verify return:1</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server done</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server session ticket</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read finished</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line"> 1 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line"> 2 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICLDCCAc+gAwIBAgIGAXlllPWnMAwGCCqBHM9VAYN1BQAwSzELMAkGA1UEBhMC</span><br><span class="line">Q04xDjAMBgNVBAoTBUdNU1NMMRAwDgYDVQQLEwdQS0kvU00yMRowGAYDVQQDExFN</span><br><span class="line">aWRkbGVDQSBmb3IgVGVzdDAiGA8yMDIxMDUxMjE2MDAwMFoYDzIwMjIwNTEyMTYw</span><br><span class="line">MDAwWjB8MQswCQYDVQQGEwJDTjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMH</span><br><span class="line">QmVpamluZzEMMAoGA1UEChMDU2VjMQwwCgYDVQQLEwNTZWMxDzANBgNVBAMTBnNl</span><br><span class="line">cnZlcjEcMBoGCSqGSIb3DQEJARYNc2VjQGVtYWlsLmNvbTBZMBMGByqGSM49AgEG</span><br><span class="line">CCqBHM9VAYItA0IABBpkgKei2J+g3S&#x2F;qd&#x2F;KHQL2j6wVhHS+qD2oAxJ&#x2F;T05zIsBOI</span><br><span class="line">&#x2F;BC+&#x2F;xOYX86uk3D9V03zC3J2GNZ1le88SIb4McqjaDBmMBsGA1UdIwQUMBKAEPl&#x2F;</span><br><span class="line">VbQnlDNiplbKb8xdGv8wGQYDVR0OBBIEEDXQBbbJ66twX&#x2F;&#x2F;RjZHc4r0wEQYDVR0R</span><br><span class="line">BAowCIIGc2VydmVyMAkGA1UdEwQCMAAwDgYDVR0PAQH&#x2F;BAQDAgDAMAwGCCqBHM9V</span><br><span class="line">AYN1BQADSQAwRgIhALEqYaJDmh24cyV3mbKt+4VHBvAirFrv&#x2F;+g&#x2F;D4OeWS3YAiEA</span><br><span class="line">jUINEpX+B9UTO4onSuOslfXpsK1ZGU28YARCOjzAUq8&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject&#x3D;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">issuer&#x3D;&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SM3</span><br><span class="line">Server Temp Key: ECDH, SM2, 256 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 2000 bytes and written 322 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">    Session-ID: 120E30267852E4300EEACEE62B3C1FEDF38504FB71950A7E1567176E44EA04E0</span><br><span class="line">    Session-ID-ctx: </span><br><span class="line">    Master-Key: 6F092582E1943404E58EB37D13577FB3AE9C20308878A1055425E007A4412475C44C1C425B593C69A9EBFB47A8C56A67</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - 86 b6 ec 0e 15 ba c8 1b-58 61 5a 08 64 cf 92 e7   ........XaZ.d...</span><br><span class="line">    0010 - 3d 79 e1 1c 59 c4 c2 9b-1b bd 6d a7 80 f4 65 6d   &#x3D;y..Y.....m...em</span><br><span class="line">    0020 - 74 fd 9c 60 ce 70 4a 7d-11 35 ce d0 fd df 1a 3e   t..&#96;.pJ&#125;.5.....&gt;</span><br><span class="line">    0030 - 81 62 c1 13 b9 d6 22 cf-9a c2 8a 07 0e 81 c1 af   .b....&quot;.........</span><br><span class="line">    0040 - f3 44 a5 07 d9 d8 97 3c-fe fe f6 e0 e3 43 ac 41   .D.....&lt;.....C.A</span><br><span class="line">    0050 - e3 09 8c 69 b5 ab 2e f2-bb 85 cc 10 ca 54 a8 44   ...i.........T.D</span><br><span class="line">    0060 - e7 a2 80 2f f7 b4 21 49-46 a8 7a cd 1b b7 69 17   ...&#x2F;..!IF.z...i.</span><br><span class="line">    0070 - 10 68 5d 24 d2 09 4a 12-d2 bc 7e a8 1a af 4f f3   .h]$..J...~...O.</span><br><span class="line">    0080 - 95 94 1d aa b3 bc 06 46-61 cc 54 03 a3 88 75 6d   .......Fa.T...um</span><br><span class="line">    0090 - 37 a4 88 5b b0 25 83 54-ec ff 95 e2 4d f6 1e db   7..[.%.T....M...</span><br><span class="line"></span><br><span class="line">    Start Time: 1620974867</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<p>服务器端s_server的显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read finished</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write session ticket</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write finished</span><br><span class="line">-----BEGIN SSL SESSION PARAMETERS-----</span><br><span class="line">MFoCAQECAgMDBALhBwQABDBvCSWC4ZQ0BOWOs30TV3+zrpwgMIh4oQVUJeAHpEEk</span><br><span class="line">dcRMHEJbWTxpqev7R6jFamehBgIEYJ4dE6IEAgIcIKQGBAQBAAAArQMCAQE&#x3D;</span><br><span class="line">-----END SSL SESSION PARAMETERS-----</span><br><span class="line">Shared ciphers:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-SM2-WITH-SMS4-GCM-SM3:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-SM2-WITH-SMS4-SM3:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:SM9-WITH-SMS4-SM3:SM9DHE-WITH-SMS4-SM3:SM2-WITH-SMS4-SM3:SM2DHE-WITH-SMS4-SM3:AES128-SHA:RSA-WITH-SMS4-SHA1:RSA-WITH-SMS4-SM3</span><br><span class="line">Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Supported Elliptic Curve Point Formats: uncompressed:ansiX962_compressed_prime:ansiX962_compressed_char2</span><br><span class="line">Supported Elliptic Curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">Shared Elliptic curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">CIPHER is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Hello!</span><br><span class="line">ERROR</span><br><span class="line">shutting down SSL</span><br><span class="line">CONNECTION CLOSED</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p>在<em><strong>ClientHello</strong></em>提供的国密组件有：0xe107（<strong>ECDHE-SM2-WITH-SMS4-GCM-SM3</strong>），0xe102（<strong>ECDHE-SM2-WITH-SMS4-SM3</strong>），0xe011（<strong>ECDHE-SM4-SM3</strong>），0xe013（<strong>ECC-SM4-SM3</strong>），0xe015（<strong>IBSDH-SM4-SM3</strong>），0xe017（<strong>IBC-SM4-SM3</strong>），0xe019（<strong>RSA-SM4-SM3</strong>），0xe01a（<strong>RSA-SM4-SHA1</strong>）；</p>
<p>在<em><strong>ClientHello</strong></em>提供的国密Hash+签名算法有：0x0707（<strong>SM3+SM2</strong>）</p>
<p>此时共同协商的密码组件是<strong>ECDHE-SM2-WITH-SMS4-GCM-SM3</strong>，在数据包中其值表示为“0xe107”，传输协议为<strong>TLSv1.2</strong>，其值为“0x0303”</p>
<p>图解数据包：</p>
<p><img src="/images/GMSSL/1-one-cert-one-auth-anlysis.jpg" alt="1-one-cert-one-auth-anlysis"></p>
<h3 id="单证书双向认证"><a href="#单证书双向认证" class="headerlink" title="单证书双向认证"></a>单证书双向认证</h3><p>抓包文件：2-one-cert-two-auth.pcapng</p>
<p>首先打开服务器s_server，服务端命令和输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_server -key .&#x2F;sm2.server&#x2F;sm2.server.sig.key.pem -cert .&#x2F;sm2.server&#x2F;sm2.server.sig.crt.pem -CAfile sm2.trust.pem -state -accept 44330 -verify 1</span><br><span class="line">verify depth is 1</span><br><span class="line">Using default temp DH parameters</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<p>然后s_client进行连接，客户端s_client的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_client -connect localhost:44330 -key .&#x2F;sm2.koper&#x2F;sm2.koper.sig.key.pem -cert .&#x2F;sm2.koper&#x2F;sm2.koper.sig.crt.pem -CAfile sm2.trust.pem -state</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">SSL_connect:before SSL initialization</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server hello</span><br><span class="line">depth&#x3D;2 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; RootCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;1 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; MiddleCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;0 C &#x3D; CN, ST &#x3D; Beijing, L &#x3D; Beijing, O &#x3D; Sec, OU &#x3D; Sec, CN &#x3D; server, emailAddress &#x3D; sec@email.com</span><br><span class="line">verify return:1</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate request</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server done</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write certificate verify</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server session ticket</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read finished</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line"> 1 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line"> 2 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICLDCCAc+gAwIBAgIGAXlllPWnMAwGCCqBHM9VAYN1BQAwSzELMAkGA1UEBhMC</span><br><span class="line">Q04xDjAMBgNVBAoTBUdNU1NMMRAwDgYDVQQLEwdQS0kvU00yMRowGAYDVQQDExFN</span><br><span class="line">aWRkbGVDQSBmb3IgVGVzdDAiGA8yMDIxMDUxMjE2MDAwMFoYDzIwMjIwNTEyMTYw</span><br><span class="line">MDAwWjB8MQswCQYDVQQGEwJDTjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMH</span><br><span class="line">QmVpamluZzEMMAoGA1UEChMDU2VjMQwwCgYDVQQLEwNTZWMxDzANBgNVBAMTBnNl</span><br><span class="line">cnZlcjEcMBoGCSqGSIb3DQEJARYNc2VjQGVtYWlsLmNvbTBZMBMGByqGSM49AgEG</span><br><span class="line">CCqBHM9VAYItA0IABBpkgKei2J+g3S&#x2F;qd&#x2F;KHQL2j6wVhHS+qD2oAxJ&#x2F;T05zIsBOI</span><br><span class="line">&#x2F;BC+&#x2F;xOYX86uk3D9V03zC3J2GNZ1le88SIb4McqjaDBmMBsGA1UdIwQUMBKAEPl&#x2F;</span><br><span class="line">VbQnlDNiplbKb8xdGv8wGQYDVR0OBBIEEDXQBbbJ66twX&#x2F;&#x2F;RjZHc4r0wEQYDVR0R</span><br><span class="line">BAowCIIGc2VydmVyMAkGA1UdEwQCMAAwDgYDVR0PAQH&#x2F;BAQDAgDAMAwGCCqBHM9V</span><br><span class="line">AYN1BQADSQAwRgIhALEqYaJDmh24cyV3mbKt+4VHBvAirFrv&#x2F;+g&#x2F;D4OeWS3YAiEA</span><br><span class="line">jUINEpX+B9UTO4onSuOslfXpsK1ZGU28YARCOjzAUq8&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject&#x3D;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">issuer&#x3D;&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">---</span><br><span class="line">Acceptable client certificate CA names</span><br><span class="line">&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">Client Certificate Types: RSA sign, DSA sign, ECDSA sign</span><br><span class="line">Requested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Requested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Peer signing digest: SM3</span><br><span class="line">Server Temp Key: ECDH, SM2, 256 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 2780 bytes and written 1951 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">    Session-ID: 9CD7AA2E27F5E99B8F9DBAF0DE60FF4C62F779758D273569E0A9640A4389BA33</span><br><span class="line">    Session-ID-ctx: </span><br><span class="line">    Master-Key: 8D425B913570771786862AC9A8683569B02996AFE418B5A6BED6D19AFCBCC769246D38376D1F39B05242F75CB6503D0E</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - d0 fb c1 bc 3a 89 d3 45-eb 58 1a ea 53 ad f5 71   ....:..E.X..S..q</span><br><span class="line">    0010 - 92 38 35 50 f0 99 cf 92-ea cc cd 68 e1 61 08 f8   .85P.......h.a..</span><br><span class="line">    0020 - 32 c0 c1 36 af 5c 55 fb-33 9a 87 5e e5 b9 8b f8   2..6.\U.3..^....</span><br><span class="line">    0030 - f2 e8 d1 3c aa b4 d1 e7-4c 89 00 af c0 56 29 cf   ...&lt;....L....V).</span><br><span class="line">    0040 - 3e de 8a a5 a4 90 f3 41-af 85 19 26 fb 12 a5 ec   &gt;......A...&amp;....</span><br><span class="line">    0050 - 22 29 3a 98 9d 4d bd 77-ac 07 c3 bc 98 34 72 35   &quot;):..M.w.....4r5</span><br><span class="line">    0060 - d0 6f 3e 1c 56 f7 29 32-42 fb 58 19 04 01 60 62   .o&gt;.V.)2B.X...&#96;b</span><br><span class="line">    0070 - 07 26 92 dd 25 98 b0 60-c5 ea 62 53 d6 4e a0 18   .&amp;..%..&#96;..bS.N..</span><br><span class="line">    0080 - ec b8 e5 48 3c 0b 9d c4-a4 95 de 99 9c 44 df de   ...H&lt;........D..</span><br><span class="line">    0090 - b8 04 37 ed a2 57 59 6c-89 3c f2 54 a9 bb 9e 5b   ..7..WYl.&lt;.T...[</span><br><span class="line">    00a0 - 23 de e8 cd 9a cb 19 bc-c8 ff ca 28 97 3c a2 bd   #..........(.&lt;..</span><br><span class="line">    00b0 - ce 52 28 b2 45 2f 7a 2b-77 85 c8 94 d5 a3 83 83   .R(.E&#x2F;z+w.......</span><br><span class="line">    00c0 - 5f a1 d2 d3 4e 09 62 57-87 c5 fa 21 85 17 5d ad   _...N.bW...!..].</span><br><span class="line">    00d0 - c0 f5 f1 4d b0 43 ed 05-76 d1 55 7a b0 5b 19 d3   ...M.C..v.Uz.[..</span><br><span class="line">    00e0 - 00 f5 a6 43 88 80 6b b5-1f 77 ef 9f d7 d6 d4 a7   ...C..k..w......</span><br><span class="line">    00f0 - 1a 05 2a d4 d7 0b 25 c3-54 93 35 20 03 b8 3e 02   ..*...%.T.5 ..&gt;.</span><br><span class="line">    0100 - 79 f7 ff 54 95 b4 97 73-81 10 12 2c 8d bc 2d 78   y..T...s...,..-x</span><br><span class="line">    0110 - 50 5c 5f 30 32 8f 68 f4-f4 74 3c d5 26 b2 e3 4e   P\_02.h..t&lt;.&amp;..N</span><br><span class="line">    0120 - c9 72 b5 e3 df 71 7d bf-33 4a 64 39 61 aa 58 1d   .r...q&#125;.3Jd9a.X.</span><br><span class="line">    0130 - 62 6e 4d 78 16 01 97 63-6c e9 e8 49 38 f9 3a ec   bnMx...cl..I8.:.</span><br><span class="line">    0140 - 87 ee 5a d4 89 24 41 23-af 80 4f ae 01 62 9f e5   ..Z..$A#..O..b..</span><br><span class="line">    0150 - 3e 4f ca 55 f9 ba 67 d5-55 8b c9 b5 ee 90 08 92   &gt;O.U..g.U.......</span><br><span class="line">    0160 - 12 57 28 2f c1 f8 32 d6-51 8c 39 27 8f c8 d1 5a   .W(&#x2F;..2.Q.9&#39;...Z</span><br><span class="line">    0170 - 3a f5 0a ce fd 1f 72 97-e5 3b 15 29 ab 1e 20 58   :.....r..;.).. X</span><br><span class="line">    0180 - 65 aa 26 99 ef 05 fd b5-d4 05 f6 17 a3 08 3f 38   e.&amp;...........?8</span><br><span class="line">    0190 - ba 70 90 ba c9 20 22 5d-19 a5 d4 33 0c 9f ed 2b   .p... &quot;]...3...+</span><br><span class="line">    01a0 - 3a a7 c1 d3 63 f3 71 c2-a4 7c ac 7b f2 29 04 3e   :...c.q..|.&#123;.).&gt;</span><br><span class="line">    01b0 - 6b c9 bf 93 d6 d9 1d a3-6a 42 c8 48 e1 d1 f5 7b   k.......jB.H...&#123;</span><br><span class="line">    01c0 - cf 9a fe 59 f9 9d ad 3c-0b 2b 86 b5 cb 0f cb 62   ...Y...&lt;.+.....b</span><br><span class="line">    01d0 - 47 8a 8f 99 09 00 9d 9e-03 06 90 d7 4e ca 35 97   G...........N.5.</span><br><span class="line">    01e0 - 33 8e e8 77 2c 66 86 26-d6 74 8a de 00 3a 84 95   3..w,f.&amp;.t...:..</span><br><span class="line">    01f0 - e6 4b e7 83 cf c3 4d 6d-c1 65 28 a4 0c 3e bc 37   .K....Mm.e(..&gt;.7</span><br><span class="line">    0200 - b5 f3 7c cc 03 50 ad 86-0d b6 52 61 47 d9 69 e2   ..|..P....RaG.i.</span><br><span class="line">    0210 - 1c 68 e4 4e 85 f9 47 2f-46 f3 34 75 f1 5e ad 9f   .h.N..G&#x2F;F.4u.^..</span><br><span class="line">    0220 - ff 42 dd ac b9 ea 24 b0-f7 b8 26 2b 51 4e 00 45   .B....$...&amp;+QN.E</span><br><span class="line">    0230 - 82 32 df f7 29 d9 d6 a1-13 28 59 e3 03 d1 e2 4a   .2..)....(Y....J</span><br><span class="line">    0240 - bd c5 63 0c 3f 07 4d ed-3c 02 a6 11 82 76 2b 6f   ..c.?.M.&lt;....v+o</span><br><span class="line">    0250 - f4 5e 20 d3 5d e8 24 d2-0a 30 6d d7 18 7d 43 28   .^ .].$..0m..&#125;C(</span><br><span class="line">    0260 - 32 9e 2f 17 47 a7 3e e2-8d e5 d2 2e 6b cd 4e ad   2.&#x2F;.G.&gt;.....k.N.</span><br><span class="line">    0270 - e5 bd 97 ae f7 ac 18 7b-56 cb d0 67 13 17 4b 81   .......&#123;V..g..K.</span><br><span class="line">    0280 - ea df 3f a3 79 d6 cf 07-1e e8 56 37 75 31 37 f7   ..?.y.....V7u17.</span><br><span class="line">    0290 - f6 43 d4 20 fd d7 35 89-5b 4a 4d 3c 6e 95 70 be   .C. ..5.[JM&lt;n.p.</span><br><span class="line">    02a0 - 7c 89 3c 66 1b 13 7d 63-f9 14 b0 33 9d c3 72 42   |.&lt;f..&#125;c...3..rB</span><br><span class="line">    02b0 - 70 d2 1a 07 c3 3e 43 a5-77 32 4e 9f 81 f1 89 ac   p....&gt;C.w2N.....</span><br><span class="line">    02c0 - 0f b4 43 18 95 3b 12 c3-ec 10 45 5e ec 3c 19 b0   ..C..;....E^.&lt;..</span><br><span class="line">    02d0 - d8 19 ac 2f a6 24 22 71-f1 9c 37 16 c8 35 44 28   ...&#x2F;.$&quot;q..7..5D(</span><br><span class="line"></span><br><span class="line">    Start Time: 1620975768</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<p>服务器端s_server的显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate request</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">depth&#x3D;2 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; RootCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;1 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; MiddleCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;0 C &#x3D; CN, ST &#x3D; Beijing, L &#x3D; Beijing, O &#x3D; Sec, OU &#x3D; Sec, CN &#x3D; koper, emailAddress &#x3D; sec@email.com</span><br><span class="line">verify return:1</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read certificate verify</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read finished</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write session ticket</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write finished</span><br><span class="line">-----BEGIN SSL SESSION PARAMETERS-----</span><br><span class="line">MIICkwIBAQICAwMEAuEHBAAEMI1CW5E1cHcXhoYqyahoNWmwKZav5Bi1pr7W0Zr8</span><br><span class="line">vMdpJG04N20fObBSQvdctlA9DqEGAgRgniCYogQCAhwgo4ICNTCCAjEwggHVoAMC</span><br><span class="line">AQICBgF5ZZUapjAMBggqgRzPVQGDdQUAMEsxCzAJBgNVBAYTAkNOMQ4wDAYDVQQK</span><br><span class="line">EwVHTVNTTDEQMA4GA1UECxMHUEtJL1NNMjEaMBgGA1UEAxMRTWlkZGxlQ0EgZm9y</span><br><span class="line">IFRlc3QwIhgPMjAyMTA1MTIxNjAwMDBaGA8yMDIyMDUxMjE2MDAwMFowezELMAkG</span><br><span class="line">A1UEBhMCQ04xEDAOBgNVBAgTB0JlaWppbmcxEDAOBgNVBAcTB0JlaWppbmcxDDAK</span><br><span class="line">BgNVBAoTA1NlYzEMMAoGA1UECxMDU2VjMQ4wDAYDVQQDEwVrb3BlcjEcMBoGCSqG</span><br><span class="line">SIb3DQEJARYNc2VjQGVtYWlsLmNvbTBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IA</span><br><span class="line">BOhXh8LQpC+cATyRNCSm2cEuMLoGY9mCPQCkl2v7z6ZlmsJNYw9ZHeHXKjOfzbN&#x2F;</span><br><span class="line">rZ1Fj2wQ6BDyEouRhIbZsQOjbzBtMBsGA1UdIwQUMBKAEPl&#x2F;VbQnlDNiplbKb8xd</span><br><span class="line">Gv8wGQYDVR0OBBIEEJQv2LqXmxUlo4nbIQCC+mMwGAYDVR0RBBEwD4ENc2VjQGVt</span><br><span class="line">YWlsLmNvbTAJBgNVHRMEAjAAMA4GA1UdDwEB&#x2F;wQEAwIAwDAMBggqgRzPVQGDdQUA</span><br><span class="line">A0gAMEUCIQDWC+&#x2F;sbV51DqGF8TyFDhlLzMFv198cmqH2WJt9bIiZgwIgJ1cO33LC</span><br><span class="line">cwmoPfuaXmQrseP+RmOEBjbRRCIh1LGrUhSkBgQEAQAAAK0DAgEB</span><br><span class="line">-----END SSL SESSION PARAMETERS-----</span><br><span class="line">Client certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICMTCCAdWgAwIBAgIGAXlllRqmMAwGCCqBHM9VAYN1BQAwSzELMAkGA1UEBhMC</span><br><span class="line">Q04xDjAMBgNVBAoTBUdNU1NMMRAwDgYDVQQLEwdQS0kvU00yMRowGAYDVQQDExFN</span><br><span class="line">aWRkbGVDQSBmb3IgVGVzdDAiGA8yMDIxMDUxMjE2MDAwMFoYDzIwMjIwNTEyMTYw</span><br><span class="line">MDAwWjB7MQswCQYDVQQGEwJDTjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMH</span><br><span class="line">QmVpamluZzEMMAoGA1UEChMDU2VjMQwwCgYDVQQLEwNTZWMxDjAMBgNVBAMTBWtv</span><br><span class="line">cGVyMRwwGgYJKoZIhvcNAQkBFg1zZWNAZW1haWwuY29tMFkwEwYHKoZIzj0CAQYI</span><br><span class="line">KoEcz1UBgi0DQgAE6FeHwtCkL5wBPJE0JKbZwS4wugZj2YI9AKSXa&#x2F;vPpmWawk1j</span><br><span class="line">D1kd4dcqM5&#x2F;Ns3+tnUWPbBDoEPISi5GEhtmxA6NvMG0wGwYDVR0jBBQwEoAQ+X9V</span><br><span class="line">tCeUM2KmVspvzF0a&#x2F;zAZBgNVHQ4EEgQQlC&#x2F;YupebFSWjidshAIL6YzAYBgNVHREE</span><br><span class="line">ETAPgQ1zZWNAZW1haWwuY29tMAkGA1UdEwQCMAAwDgYDVR0PAQH&#x2F;BAQDAgDAMAwG</span><br><span class="line">CCqBHM9VAYN1BQADSAAwRQIhANYL7+xtXnUOoYXxPIUOGUvMwW&#x2F;X3xyaofZYm31s</span><br><span class="line">iJmDAiAnVw7fcsJzCag9+5peZCux4&#x2F;5GY4QGNtFEIiHUsatSFA&#x3D;&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject&#x3D;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;koper&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">issuer&#x3D;&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">Shared ciphers:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-SM2-WITH-SMS4-GCM-SM3:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-SM2-WITH-SMS4-SM3:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:SM9-WITH-SMS4-SM3:SM9DHE-WITH-SMS4-SM3:SM2-WITH-SMS4-SM3:SM2DHE-WITH-SMS4-SM3:AES128-SHA:RSA-WITH-SMS4-SHA1:RSA-WITH-SMS4-SM3</span><br><span class="line">Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Peer signing digest: SM3</span><br><span class="line">Supported Elliptic Curve Point Formats: uncompressed:ansiX962_compressed_prime:ansiX962_compressed_char2</span><br><span class="line">Supported Elliptic Curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">Shared Elliptic curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">CIPHER is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Hello!</span><br><span class="line">ERROR</span><br><span class="line">shutting down SSL</span><br><span class="line">CONNECTION CLOSED</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="双证书单向认证"><a href="#双证书单向认证" class="headerlink" title="双证书单向认证"></a>双证书单向认证</h3><p>抓包文件：3-two-cert-one-auth.pcapng</p>
<p>首先打开服务器s_server，服务端命令和输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_server -key .&#x2F;sm2.server&#x2F;sm2.server.sig.key.pem -cert .&#x2F;sm2.server&#x2F;sm2.server.sig.crt.pem -dkey .&#x2F;sm2.server&#x2F;sm2.server.enc.key.pem -dcert .&#x2F;sm2.server&#x2F;sm2.server.enc.crt.pem -CAfile sm2.trust.pem -state -accept 44330</span><br><span class="line">Using default temp DH parameters</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">[GMTLS_DEBUG] set sm2 encryption certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 decryption private key</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<p>然后s_client进行连接，客户端s_client的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_client -connect localhost:44330 -key .&#x2F;sm2.koper&#x2F;sm2.koper.sig.key.pem -cert .&#x2F;sm2.koper&#x2F;sm2.koper.sig.crt.pem -dkey .&#x2F;sm2.koper&#x2F;sm2.koper.enc.key.pem -dcert .&#x2F;sm2.koper&#x2F;sm2.koper.enc.crt.pem -CAfile sm2.trust.pem -state</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">[GMTLS_DEBUG] set sm2 encryption certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 decryption private key</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">SSL_connect:before SSL initialization</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server hello</span><br><span class="line">depth&#x3D;2 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; RootCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;1 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; MiddleCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;0 C &#x3D; CN, ST &#x3D; Beijing, L &#x3D; Beijing, O &#x3D; Sec, OU &#x3D; Sec, CN &#x3D; server, emailAddress &#x3D; sec@email.com</span><br><span class="line">verify return:1</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server done</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server session ticket</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read finished</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line"> 1 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line"> 2 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICLDCCAc+gAwIBAgIGAXlllPWnMAwGCCqBHM9VAYN1BQAwSzELMAkGA1UEBhMC</span><br><span class="line">Q04xDjAMBgNVBAoTBUdNU1NMMRAwDgYDVQQLEwdQS0kvU00yMRowGAYDVQQDExFN</span><br><span class="line">aWRkbGVDQSBmb3IgVGVzdDAiGA8yMDIxMDUxMjE2MDAwMFoYDzIwMjIwNTEyMTYw</span><br><span class="line">MDAwWjB8MQswCQYDVQQGEwJDTjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMH</span><br><span class="line">QmVpamluZzEMMAoGA1UEChMDU2VjMQwwCgYDVQQLEwNTZWMxDzANBgNVBAMTBnNl</span><br><span class="line">cnZlcjEcMBoGCSqGSIb3DQEJARYNc2VjQGVtYWlsLmNvbTBZMBMGByqGSM49AgEG</span><br><span class="line">CCqBHM9VAYItA0IABBpkgKei2J+g3S&#x2F;qd&#x2F;KHQL2j6wVhHS+qD2oAxJ&#x2F;T05zIsBOI</span><br><span class="line">&#x2F;BC+&#x2F;xOYX86uk3D9V03zC3J2GNZ1le88SIb4McqjaDBmMBsGA1UdIwQUMBKAEPl&#x2F;</span><br><span class="line">VbQnlDNiplbKb8xdGv8wGQYDVR0OBBIEEDXQBbbJ66twX&#x2F;&#x2F;RjZHc4r0wEQYDVR0R</span><br><span class="line">BAowCIIGc2VydmVyMAkGA1UdEwQCMAAwDgYDVR0PAQH&#x2F;BAQDAgDAMAwGCCqBHM9V</span><br><span class="line">AYN1BQADSQAwRgIhALEqYaJDmh24cyV3mbKt+4VHBvAirFrv&#x2F;+g&#x2F;D4OeWS3YAiEA</span><br><span class="line">jUINEpX+B9UTO4onSuOslfXpsK1ZGU28YARCOjzAUq8&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject&#x3D;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">issuer&#x3D;&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">Peer signing digest: SM3</span><br><span class="line">Server Temp Key: ECDH, SM2, 256 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 2000 bytes and written 322 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">    Session-ID: 74900E774DFC5EA731925765651AA7AE8D919A25DCC9219E4987B0B14AC20B1D</span><br><span class="line">    Session-ID-ctx: </span><br><span class="line">    Master-Key: 8B13A72CD68C5F0B8DBFF22A9C97EB67F30F8D11A38FD58DEAD255FEAADEFE426225AA2C90F77809A9853B246A6563C3</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - 94 e5 a8 ce a0 bd 7a 15-30 4e 4b bb 6c be 41 a8   ......z.0NK.l.A.</span><br><span class="line">    0010 - fb d9 d2 a1 11 d5 5a 7d-c3 9a 7d 01 c4 50 1b ad   ......Z&#125;..&#125;..P..</span><br><span class="line">    0020 - e7 2d a9 98 5f 64 06 85-0e d7 3e 46 c3 77 d8 13   .-.._d....&gt;F.w..</span><br><span class="line">    0030 - 2a 4b 4d 45 cb 04 0f 50-d8 d2 fd 94 b7 a5 38 88   *KME...P......8.</span><br><span class="line">    0040 - 61 14 f3 e3 fb b2 93 e8-16 84 bb 95 41 ee 4f bf   a...........A.O.</span><br><span class="line">    0050 - 80 c2 ef 9e 91 49 0d 23-19 07 80 ff 88 66 fb 8c   .....I.#.....f..</span><br><span class="line">    0060 - 34 b3 1f 4a db 6a 67 29-5a d2 46 aa 4d 89 00 cb   4..J.jg)Z.F.M...</span><br><span class="line">    0070 - ce 78 f5 bc c3 c0 71 c6-d9 b5 4a a0 2c 3f 95 fb   .x....q...J.,?..</span><br><span class="line">    0080 - 38 51 68 38 15 b7 c1 c6-0f 6d 1e 92 19 f9 7b ed   8Qh8.....m....&#123;.</span><br><span class="line">    0090 - 67 45 64 e6 9f c8 af 3b-57 80 a6 31 13 13 b8 d2   gEd....;W..1....</span><br><span class="line"></span><br><span class="line">    Start Time: 1620976379</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<p>服务器端s_server的显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read finished</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write session ticket</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write finished</span><br><span class="line">-----BEGIN SSL SESSION PARAMETERS-----</span><br><span class="line">MFoCAQECAgMDBALhBwQABDCLE6cs1oxfC42&#x2F;8iqcl+tn8w+NEaOP1Y3q0lX+qt7+</span><br><span class="line">QmIlqiyQ93gJqYU7JGplY8OhBgIEYJ4i+6IEAgIcIKQGBAQBAAAArQMCAQE&#x3D;</span><br><span class="line">-----END SSL SESSION PARAMETERS-----</span><br><span class="line">Shared ciphers:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-SM2-WITH-SMS4-GCM-SM3:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-SM2-WITH-SMS4-SM3:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:SM9-WITH-SMS4-SM3:SM9DHE-WITH-SMS4-SM3:SM2-WITH-SMS4-SM3:SM2DHE-WITH-SMS4-SM3:AES128-SHA:RSA-WITH-SMS4-SHA1:RSA-WITH-SMS4-SM3</span><br><span class="line">Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Supported Elliptic Curve Point Formats: uncompressed:ansiX962_compressed_prime:ansiX962_compressed_char2</span><br><span class="line">Supported Elliptic Curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">Shared Elliptic curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">CIPHER is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Hello!</span><br><span class="line">ERROR</span><br><span class="line">shutting down SSL</span><br><span class="line">CONNECTION CLOSED</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<h3 id="双证书双向认证"><a href="#双证书双向认证" class="headerlink" title="双证书双向认证"></a>双证书双向认证</h3><p>抓包文件：4-two-cert-two-auth.pcapng</p>
<p>首先打开服务器s_server，服务端命令和输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_server -key .&#x2F;sm2.server&#x2F;sm2.server.sig.key.pem -cert .&#x2F;sm2.server&#x2F;sm2.server.sig.crt.pem -dkey .&#x2F;sm2.server&#x2F;sm2.server.enc.key.pem -dcert .&#x2F;sm2.server&#x2F;sm2.server.enc.crt.pem -CAfile sm2.trust.pem -state -accept 44330 -verify 1</span><br><span class="line">verify depth is 1</span><br><span class="line">Using default temp DH parameters</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">[GMTLS_DEBUG] set sm2 encryption certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 decryption private key</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure>

<p>然后s_client进行连接，客户端s_client的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost demoCA]# gmssl s_client -connect localhost:44330 -key .&#x2F;sm2.koper&#x2F;sm2.koper.sig.key.pem -cert .&#x2F;sm2.koper&#x2F;sm2.koper.sig.crt.pem -dkey .&#x2F;sm2.koper&#x2F;sm2.koper.enc.key.pem -dcert .&#x2F;sm2.koper&#x2F;sm2.koper.enc.crt.pem -CAfile sm2.trust.pem -state</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 signing private key</span><br><span class="line">[GMTLS_DEBUG] set sm2 encryption certificate</span><br><span class="line">[GMTLS_DEBUG] set sm2 decryption private key</span><br><span class="line">CONNECTED(00000003)</span><br><span class="line">SSL_connect:before SSL initialization</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client hello</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server hello</span><br><span class="line">depth&#x3D;2 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; RootCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;1 C &#x3D; CN, O &#x3D; GMSSL, OU &#x3D; PKI&#x2F;SM2, CN &#x3D; MiddleCA for Test</span><br><span class="line">verify return:1</span><br><span class="line">depth&#x3D;0 C &#x3D; CN, ST &#x3D; Beijing, L &#x3D; Beijing, O &#x3D; Sec, OU &#x3D; Sec, CN &#x3D; server, emailAddress &#x3D; sec@email.com</span><br><span class="line">verify return:1</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server certificate request</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server done</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client certificate</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write client key exchange</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS write finished</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read server session ticket</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_connect:SSLv3&#x2F;TLS read finished</span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line"> 1 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line"> 2 s:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">   i:&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">---</span><br><span class="line">Server certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICLDCCAc+gAwIBAgIGAXlllPWnMAwGCCqBHM9VAYN1BQAwSzELMAkGA1UEBhMC</span><br><span class="line">Q04xDjAMBgNVBAoTBUdNU1NMMRAwDgYDVQQLEwdQS0kvU00yMRowGAYDVQQDExFN</span><br><span class="line">aWRkbGVDQSBmb3IgVGVzdDAiGA8yMDIxMDUxMjE2MDAwMFoYDzIwMjIwNTEyMTYw</span><br><span class="line">MDAwWjB8MQswCQYDVQQGEwJDTjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMH</span><br><span class="line">QmVpamluZzEMMAoGA1UEChMDU2VjMQwwCgYDVQQLEwNTZWMxDzANBgNVBAMTBnNl</span><br><span class="line">cnZlcjEcMBoGCSqGSIb3DQEJARYNc2VjQGVtYWlsLmNvbTBZMBMGByqGSM49AgEG</span><br><span class="line">CCqBHM9VAYItA0IABBpkgKei2J+g3S&#x2F;qd&#x2F;KHQL2j6wVhHS+qD2oAxJ&#x2F;T05zIsBOI</span><br><span class="line">&#x2F;BC+&#x2F;xOYX86uk3D9V03zC3J2GNZ1le88SIb4McqjaDBmMBsGA1UdIwQUMBKAEPl&#x2F;</span><br><span class="line">VbQnlDNiplbKb8xdGv8wGQYDVR0OBBIEEDXQBbbJ66twX&#x2F;&#x2F;RjZHc4r0wEQYDVR0R</span><br><span class="line">BAowCIIGc2VydmVyMAkGA1UdEwQCMAAwDgYDVR0PAQH&#x2F;BAQDAgDAMAwGCCqBHM9V</span><br><span class="line">AYN1BQADSQAwRgIhALEqYaJDmh24cyV3mbKt+4VHBvAirFrv&#x2F;+g&#x2F;D4OeWS3YAiEA</span><br><span class="line">jUINEpX+B9UTO4onSuOslfXpsK1ZGU28YARCOjzAUq8&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">subject&#x3D;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;Sec&#x2F;OU&#x3D;Sec&#x2F;CN&#x3D;server&#x2F;emailAddress&#x3D;sec@email.com</span><br><span class="line">issuer&#x3D;&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">---</span><br><span class="line">Acceptable client certificate CA names</span><br><span class="line">&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;RootCA for Test</span><br><span class="line">&#x2F;C&#x3D;CN&#x2F;O&#x3D;GMSSL&#x2F;OU&#x3D;PKI&#x2F;SM2&#x2F;CN&#x3D;MiddleCA for Test</span><br><span class="line">Client Certificate Types: RSA sign, DSA sign, ECDSA sign</span><br><span class="line">Requested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Requested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Peer signing digest: SM3</span><br><span class="line">Server Temp Key: ECDH, SM2, 256 bits</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 2204 bytes and written 334 bytes</span><br><span class="line">Verification: OK</span><br><span class="line">---</span><br><span class="line">New, TLSv1.2, Cipher is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Server public key is 256 bit</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">    Session-ID: 8F24410489864FE9CB6688032BBB484DC641531AC1BEA0CCB256C60C06DEA4FA</span><br><span class="line">    Session-ID-ctx: </span><br><span class="line">    Master-Key: EC69FA7721F60D09C2F58EFFC5CE0061FD9D73F46A13D91BE89A593282F7DAA3534D1826D1E2B5D05EDADF6A37E60B7A</span><br><span class="line">    PSK identity: None</span><br><span class="line">    PSK identity hint: None</span><br><span class="line">    SRP username: None</span><br><span class="line">    TLS session ticket lifetime hint: 7200 (seconds)</span><br><span class="line">    TLS session ticket:</span><br><span class="line">    0000 - cc 97 5c 83 02 da d4 9c-30 03 6a 4b 12 fd 24 c2   ..\.....0.jK..$.</span><br><span class="line">    0010 - a1 80 ca ff 04 95 33 39-3c 23 a6 6c 44 95 e2 33   ......39&lt;#.lD..3</span><br><span class="line">    0020 - 23 bd 56 20 9e 25 9b 7d-52 36 7a 3b 11 c6 eb b0   #.V .%.&#125;R6z;....</span><br><span class="line">    0030 - d0 bd 7a 62 3e 12 a0 39-35 a3 03 7a 2a fc 93 2e   ..zb&gt;..95..z*...</span><br><span class="line">    0040 - d0 f0 88 a1 6b 99 f3 12-8f 37 d6 cc 6f 30 5f fb   ....k....7..o0_.</span><br><span class="line">    0050 - 78 2e 45 d8 05 d4 fd 6c-69 56 66 e9 f9 73 5c d7   x.E....liVf..s\.</span><br><span class="line">    0060 - 17 68 80 b9 53 19 d4 71-ad 97 8b df a7 3b 11 5f   .h..S..q.....;._</span><br><span class="line">    0070 - 3e 32 55 77 6d 2d 1d a0-95 2e b8 cd 44 de d5 4f   &gt;2Uwm-......D..O</span><br><span class="line">    0080 - 62 ab 1a 02 8f 47 e9 ac-63 56 15 0b 80 a3 1e 84   b....G..cV......</span><br><span class="line">    0090 - 7f 54 e7 f9 d1 39 9e 7e-67 85 d5 1a e3 6e db ad   .T...9.~g....n..</span><br><span class="line"></span><br><span class="line">    Start Time: 1620976664</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">    Extended master secret: yes</span><br><span class="line">---</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<p>服务器端s_server的显示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:before SSL initialization</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server hello</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write certificate request</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write server done</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client certificate</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read client key exchange</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS read finished</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write session ticket</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write change cipher spec</span><br><span class="line">SSL_accept:SSLv3&#x2F;TLS write finished</span><br><span class="line">-----BEGIN SSL SESSION PARAMETERS-----</span><br><span class="line">MFoCAQECAgMDBALhBwQABDDsafp3IfYNCcL1jv&#x2F;FzgBh&#x2F;Z1z9GoT2Rvomlkygvfa</span><br><span class="line">o1NNGCbR4rXQXtrfajfmC3qhBgIEYJ4kGKIEAgIcIKQGBAQBAAAArQMCAQE&#x3D;</span><br><span class="line">-----END SSL SESSION PARAMETERS-----</span><br><span class="line">Shared ciphers:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-SM2-WITH-SMS4-GCM-SM3:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-SM2-WITH-SMS4-SM3:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:SM9-WITH-SMS4-SM3:SM9DHE-WITH-SMS4-SM3:SM2-WITH-SMS4-SM3:SM2DHE-WITH-SMS4-SM3:AES128-SHA:RSA-WITH-SMS4-SHA1:RSA-WITH-SMS4-SM3</span><br><span class="line">Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Shared Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1:SM2+SM3</span><br><span class="line">Supported Elliptic Curve Point Formats: uncompressed:ansiX962_compressed_prime:ansiX962_compressed_char2</span><br><span class="line">Supported Elliptic Curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">Shared Elliptic curves: SM2:X25519:P-256:P-521:P-384</span><br><span class="line">CIPHER is ECDHE-SM2-WITH-SMS4-GCM-SM3</span><br><span class="line">Secure Renegotiation IS supported</span><br><span class="line">Hello!</span><br><span class="line">ERROR</span><br><span class="line">shutting down SSL</span><br><span class="line">CONNECTION CLOSED</span><br><span class="line">ACCEPT</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><h2 id="国密SSL-HTTP"><a href="#国密SSL-HTTP" class="headerlink" title="国密SSL/HTTP"></a>国密SSL/HTTP</h2><ul>
<li><p><a href="https://blog.csdn.net/WoTrusCA">沃通的CSDN官方博客</a>有许多GM相关的东西，可以多看看</p>
<p><a href="https://blog.csdn.net/WoTrusCA/article/details/108366659?spm=1001.2014.3001.5501">沃通：关于国密HTTPS的那些事（一）</a>：国密SSL的协议过程的图解详细分析（双证书和双向认证）。</p>
<p><img src="/images/GMSSL/GM-SSL-Process.png" alt="GM-SSL-Process"></p>
<p><a href="https://blog.csdn.net/WoTrusCA/article/details/108398730?spm=1001.2014.3001.5501">沃通：关于国密HTTPS的那些事（二）</a>：每个协议版本和密码组件都有其对应的值（Value)，ClientHello中包含客户端本地支持的所有密码组件，以供服务端可以选择。</p>
<p><a href="https://blog.csdn.net/WoTrusCA/article/details/108440658?spm=1001.2014.3001.5501">沃通：关于国密HTTPS的那些事（三）</a>：12个国密组件及其对应值，简单阐述了国密SSL和Openssl的区别。</p>
<p><img src="/images/GMSSL/GM-CipherSuites.png"></p>
</li>
<li><p><strong>GmSSL-Github-guanzhi相关：</strong></p>
<p>CSDN-viqjeee：<a href="https://blog.csdn.net/qq_39952971/article/details/115178980">gmssl 国密ssl流程测试</a></p>
<p>CSDN-viqjeee：<a href="https://blog.csdn.net/qq_39952971/article/details/115168241">gmssl国密双证书制作</a></p>
<p>CSDN-viqjeee：<a href="https://blog.csdn.net/qq_39952971/article/details/115251306?spm=1001.2014.3001.5501">登录过程中密码的安全和攻击风险</a></p>
<p>CSDN-viqjeee：<a href="https://blog.csdn.net/qq_39952971/article/details/114868960?spm=1001.2014.3001.5501">使用第三方PC对通信设备进行抓包的方法</a></p>
<p>CSDN-小火龙呢：<a href="https://blog.csdn.net/qq_15077747/article/details/108218240">GMSSL编译及https链接(一)</a></p>
<p>CSDN-小火龙呢：<a href="https://blog.csdn.net/qq_15077747/article/details/102501978?spm=1001.2014.3001.5501">TCP的三次握手与四次挥手理解</a></p>
<p><a href="https://kb.cnblogs.com/page/162080/">SSL协议详解</a></p>
<p>CSDN-小火龙呢：<a href="https://blog.csdn.net/qq_15077747/article/details/108220046?spm=1001.2014.3001.5501">编译配置nginx支持国密（二）</a></p>
<p>CSDN-小火龙呢：<a href="https://blog.csdn.net/qq_15077747/article/details/108602988?spm=1001.2014.3001.5501">gmssl编译后不支持360浏览器双向https问题</a></p>
<p><a href="https://www.cnblogs.com/bigben0123/p/12650545.html">OpenSSL和GmSSL在Windows下编译过程</a></p>
<p><a href="https://www.cnblogs.com/cherishui/p/14626196.html">SSL/TLS 与国密算法</a></p>
<p><a href="https://www.cnblogs.com/skills/p/13620478.html">GmSSL开发环境搭建及双证书生成</a>：在生成证书里面是讲的最详细也是最好的一个博客文章（注意博客生成根证书的时候命令有一处错误，Root.key应该改成CA.key）（注意里面的key和crt文件）（如果这里的证书不行，直接去国密SSL实验室进行生成就行，都有）</p>
<p><a href="https://blog.csdn.net/mogoweb/article/details/105020965">何为单证书和双证书？</a></p>
</li>
</ul>
<h2 id="初期资料"><a href="#初期资料" class="headerlink" title="初期资料"></a>初期资料</h2><p><a href="https://juejin.cn/post/6844904114879463438">掘金：浅谈国密算法</a>；</p>
<p><a href="https://www.jianshu.com/p/3ac6d7b3cf02">简书：国密算法</a>；</p>
<p><a href="https://github.com/PopezLotado/SM2Java">SM2的Java算法实现</a></p>
<p><a href="https://github.com/windard/sm4/blob/master/README.md">SM4：Github的一个项目</a>；</p>
<p><a href="https://www.huaweicloud.com/theme/484689-1-G">华为云：国产密码算法</a>；</p>
<p><a href="https://github.com/hwyqb/SM2_SM3_SM4Encrypt">SM2/SM3/SM4的Java算法实现-Github</a>；</p>
<p><a href="https://www.wosign.com/FAQ/faq_2019062501.htm">国密SSL协议</a>；</p>
<p><a href="https://fisco-bcos-documentation.readthedocs.io/zh_CN/latest/docs/articles/3_features/36_cryptographic/index.html">国密算法和协议</a>；</p>
<p><a href="https://patents.google.com/patent/CN106656939A/zh">专利：国密SSL协议和标准SSL协议转发系统及方法</a>；</p>
<p><a href="https://patents.google.com/patent/CN104394179A/zh">专利：支持国密算法的安全套接层协议扩展方法</a>；</p>
<p><a href="https://blog.csdn.net/mrpre/article/details/78015580">CSDN：国密SSL协议</a>；CSDN的源码：<a href="https://github.com/mrpre/atls">Github：ATls</a>；有wireshark抓包进行分析</p>
<p><a href="https://blog.csdn.net/WoTrusCA/article/details/108440658">关于国密HTTPS的那些事</a></p>
<p><a href="https://blog.csdn.net/upset_ming/article/details/79880688">国密SSL协议开发总结（附报文详细分析）</a>：详细分析了GMSSL协议的合格部分和过程（很全了），其<a href="https://blog.csdn.net/upset_ming">大宝CA国密SSL国密TOMCAT_CSDN博客</a>)有一些相关的东西，注意还有一个<a href="https://www.doubleca.com/test_toIndexPage.action">大宝CA数字证书测试平台</a>。</p>
<p><em><strong>segmentfault平台：</strong></em><a href="https://segmentfault.com/a/1190000024448440">国密SSL性能测试</a>-可以结合前面国密SSL实验室的测试工具进行。<a href="https://segmentfault.com/a/1190000023890321?utm_source=sf-similar-article">国密SSL之Java实现</a>-有Java源码，感觉可能会存在一些问题。<a href="https://segmentfault.com/a/1190000016808783?utm_source=sf-similar-article">Bytom国密网说明和指南</a>-有Github源码。</p>
<p><a href="https://developer.aliyun.com/article/770830">国密SSL协议之Nginx集成</a>：结合前面的<em>国密SSL实验室</em>进行，在CentOS 7环境上实验（失败）</p>
<p><a href="https://cloud.tencent.com/developer/article/1597165">搭建国密SSL开发测试环境</a>：结合前面的<em><strong>GmSSL-关志教师-Github</strong></em>进行，在CentOS 7环境上进行实验（成功）</p>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>protocol</tag>
        <tag>Industrial control</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/manifest.json</url>
    <content><![CDATA[{"name":"Koper","short_name":"Koper","start_url":"/","icons":[{"src":"/images/siteicon/android-chrome-36x36.png","sizes":"36x36","type":"image/png"},{"src":"/images/siteicon/android-chrome-48x48.png","sizes":"48x48","type":"image/png"},{"src":"/images/siteicon/android-chrome-72x72.png","sizes":"72x72","type":"image/png"},{"src":"/images/siteicon/android-chrome-96x96.png","sizes":"96x96","type":"image/png"},{"src":"/images/siteicon/android-chrome-144x144.png","sizes":"144x144","type":"image/png"},{"src":"/images/siteicon/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/images/siteicon/android-chrome-256x256.png","sizes":"256x256","type":"image/png"},{"src":"/images/siteicon/android-chrome-384x384.png","sizes":"384x384","type":"image/png"},{"src":"/images/siteicon/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>关于我：</p>
<p>一名在读的打工人，每天的事就是科研科研</p>
<p>同时分享自己在读的生活和一些日常</p>
]]></content>
  </entry>
  <entry>
    <title>archives</title>
    <url>/archives/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/images/siteicon/README.html</url>
    <content><![CDATA[<h1 id="Your-Favicon-Package"><a href="#Your-Favicon-Package" class="headerlink" title="Your Favicon Package"></a>Your Favicon Package</h1><p>This package was generated with <a href="https://realfavicongenerator.net/">RealFaviconGenerator</a> <a href="https://realfavicongenerator.net/change_log#v0.16">v0.16</a></p>
<h2 id="Install-instructions"><a href="#Install-instructions" class="headerlink" title="Install instructions"></a>Install instructions</h2><p>To install this package:</p>
<p>Extract this package in <code>&lt;web site&gt;/images/siteicon/</code>. If your site is <code><a href="http://www.example.com/">http://www.example.com</a></code>, you should be able to access a file named <code><a href="http://www.example.com/images/siteicon/favicon.ico">http://www.example.com/images/siteicon/favicon.ico</a></code>.</p>
<p>Insert the following code in the <code>head</code> section of your pages:</p>
<pre><code>&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;/images/siteicon/apple-touch-icon.png&quot;&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/images/siteicon/favicon-32x32.png&quot;&gt;
&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/images/siteicon/favicon-16x16.png&quot;&gt;
&lt;link rel=&quot;manifest&quot; href=&quot;/images/siteicon/site.webmanifest&quot;&gt;
&lt;link rel=&quot;mask-icon&quot; href=&quot;/images/siteicon/safari-pinned-tab.svg&quot; color=&quot;#5bbad5&quot;&gt;
&lt;link rel=&quot;shortcut icon&quot; href=&quot;/images/siteicon/favicon.ico&quot;&gt;
&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;Koper&quot;&gt;
&lt;meta name=&quot;application-name&quot; content=&quot;Koper&quot;&gt;
&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#c4bdc5&quot;&gt;
&lt;meta name=&quot;msapplication-config&quot; content=&quot;/images/siteicon/browserconfig.xml&quot;&gt;
&lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot;&gt;
</code></pre>
<p><em>Optional</em> - Check your favicon with the <a href="https://realfavicongenerator.net/favicon_checker">favicon checker</a></p>
]]></content>
  </entry>
</search>
